{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { useState, useEffect, useReducer, useRef } from 'react';\n\nexport type GunStatic = any;\n\nexport type GunRef = any;\n\nexport type NamespacedRef = any;\n\nexport type KeyPair = {\n  pub: string;\n  priv: string;\n  epub: string;\n  epriv: string;\n};\n\nexport type Options = {\n  appKeys?: undefined | string | KeyPair;\n  sea?: any;\n  interval?: number;\n  useOpen?: boolean;\n};\n\nexport type ActionType = {\n  type: string;\n  data: any;\n};\n\nexport type UpdateType = {\n  id: string;\n  data: any;\n};\n\nexport const encryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  return keys && sea ? sea.encrypt(data, keys) : Promise.resolve(data);\n};\n\nexport const decryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  return keys && sea ? sea.decrypt(data, keys) : Promise.resolve(data);\n};\n\nexport const debouncedUpdates = (dispatcher, timeout = 100) => {\n  let updates: any[] = [];\n  let handler;\n  return (update: UpdateType) => {\n    updates.push(update);\n    if (!handler) {\n      handler = setTimeout(() => {\n        let newStateSlice = updates.reduce((previousState, { id, data }) => {\n          previousState[id] = data;\n          return previousState;\n        }, {});\n        dispatcher(newStateSlice);\n        updates = [];\n        handler = null;\n      }, timeout);\n    }\n\n    return () => {\n      clearTimeout(handler);\n      updates = [];\n      handler = null;\n    };\n  };\n};\n\nexport const reducer = (state: {}, { data, type }: ActionType) => {\n  switch (type) {\n    case 'add':\n      return { ...state, ...data };\n    case 'update':\n      return { ...state, [data.nodeID]: data };\n    case 'remove':\n      delete state[data];\n      return { ...state };\n    default:\n      throw new Error();\n  }\n};\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n  return isMounted;\n};\n\nexport const useSafeReducer = <T>(reducer, initialState): [T, Function] => {\n  const [state, dispatch] = useReducer<T>(reducer, initialState);\n  const isMounted = useIsMounted();\n\n  function safeDispatch(args) {\n    if (isMounted.current) {\n      dispatch(args);\n    }\n  }\n\n  return [state, safeDispatch];\n};\n\nexport const useGun = (Gun: GunStatic, peerList: string[]) => {\n  const [gun] = useState(\n    Gun({\n      peers: peerList,\n    })\n  );\n\n  return [gun];\n};\n\nexport const useGunNamespace = (gun: GunRef) => {\n  const [namespace, setNamespace] = useState(null);\n  if (!namespace) {\n    setNamespace(gun.user());\n  }\n  return [namespace];\n};\n\nexport const useGunKeyAuth = (\n  gun: GunRef,\n  keys: KeyPair,\n  triggerAuth: boolean = true\n) => {\n  // Will attempt to perform a login (when triggerAuth is set to true),\n  // or, if false, returns a namespaced gun node\n  const [namespacedGraph] = useGunNamespace(gun);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  gun.on('auth', () => {\n    setIsLoggedIn(true);\n  });\n\n  useEffect(() => {\n    if (namespacedGraph && !namespacedGraph.is && keys && triggerAuth) {\n      namespacedGraph.auth(keys);\n    }\n  }, [triggerAuth, namespacedGraph, keys]);\n\n  return [namespacedGraph, isLoggedIn];\n};\n\nexport const useGunKeys = (sea: any, initialValue: any) => {\n  const [keys, setKeys] = useState(initialValue);\n\n  async function getKeySet() {\n    const pair: KeyPair = await sea.pair();\n    setKeys(pair);\n  }\n\n  if (!keys) {\n    getKeySet();\n  }\n\n  return [keys, setKeys];\n};\n\nexport const useGunState = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n) => {\n  const { appKeys, sea, interval = 100, useOpen = false } = opts;\n  const [gunAppGraph] = useState(ref);\n  const [fields, dispatch] = useSafeReducer<T>(reducer, {});\n  const handler = useRef(null);\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    const debouncedHandlers: Function[] = [];\n    if (isMounted.current) {\n      const updater = debouncedUpdates((data) => {\n        dispatch({ type: 'add', data });\n      }, interval);\n\n      const gunCb = async (encryptedField, nodeID, message, event) => {\n        let decryptedField = await decryptData(encryptedField, appKeys, sea);\n        Object.keys(decryptedField).forEach((key) => {\n          let cleanFn = updater({ id: key, data: decryptedField[key] });\n          debouncedHandlers.push(cleanFn);\n        });\n\n        if (!handler.current) {\n          handler.current = event;\n        }\n      };\n\n      if (useOpen) {\n        if (!gunAppGraph.open) {\n          throw new Error('Please include gun/lib/open.');\n        } else {\n          gunAppGraph.open(gunCb);\n        }\n      } else {\n        gunAppGraph.on(gunCb);\n      }\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current.off();\n      }\n      if (debouncedHandlers.length) {\n        //cleanup timeouts\n        debouncedHandlers.forEach((c) => c());\n      }\n    };\n    // We just need to set the listener once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Working with root node fields\n  const put = async (data: T) => {\n    let encryptedData = await encryptData(data, appKeys, sea);\n    await new Promise((resolve, reject) =>\n      gunAppGraph.put(encryptedData, (ack) =>\n        ack.err ? reject(ack.err) : resolve()\n      )\n    );\n  };\n\n  const remove = async (field: string) => {\n    await new Promise((resolve, reject) =>\n      gunAppGraph.put(null, (ack) => (ack.err ? reject(ack.err) : resolve()))\n    );\n    dispatch({ type: 'remove', data: field });\n  };\n\n  return { fields, put, remove };\n};\n\nexport const useGunCollectionState = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n) => {\n  const { appKeys, sea, interval = 100, useOpen } = opts;\n  const [gunAppGraph] = useState(ref);\n  const [collection, dispatch] = useSafeReducer<Record<string, T>>(reducer, {});\n  const handler = useRef(null);\n  const isMounted = useIsMounted();\n\n  // Working with Sets\n  useEffect(() => {\n    const debouncedHandlers: Function[] = [];\n    if (isMounted.current) {\n      const updater = debouncedUpdates((data) => {\n        dispatch({ type: 'add', data });\n      }, interval);\n\n      const gunCb = async (encryptedNode, nodeID, message, event) => {\n        let item = await decryptData(encryptedNode, appKeys, sea);\n        if (item) {\n          let cleanFn = updater({\n            id: nodeID,\n            data: { ...item, nodeID },\n          });\n          debouncedHandlers.push(cleanFn);\n        }\n\n        if (!handler.current) {\n          handler.current = event;\n        }\n      };\n\n      if (useOpen) {\n        if (!gunAppGraph.open) {\n          throw new Error('Please include gun/lib/open.');\n        } else {\n          gunAppGraph.map().open(gunCb);\n        }\n      } else {\n        gunAppGraph.map().on(gunCb);\n      }\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current.off();\n      }\n      if (debouncedHandlers.length) {\n        //cleanup timeouts\n        debouncedHandlers.forEach((c) => c());\n      }\n    };\n    // We just need to set the listener once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const updateInSet = async (nodeID: string, data: T) => {\n    let encryptedData = await encryptData(data, appKeys, sea);\n    await new Promise((resolve, reject) =>\n      gunAppGraph\n        .get(nodeID)\n        .put(encryptedData, (ack) => (ack.err ? reject(ack.err) : resolve()))\n    );\n    dispatch({ type: 'update', data: { nodeID, ...data } });\n  };\n\n  const addToSet = async (data: T, nodeID?: string) => {\n    let encryptedData = await encryptData(data, appKeys, sea);\n    if (!nodeID) {\n      await new Promise((resolve, reject) =>\n        gunAppGraph.set(encryptedData, (ack) =>\n          ack.err ? reject(ack.err) : resolve()\n        )\n      );\n    } else {\n      await new Promise((resolve, reject) =>\n        gunAppGraph\n          .get(nodeID)\n          .put(encryptedData, (ack) => (ack.err ? reject(ack.err) : resolve()))\n      );\n    }\n  };\n\n  const removeFromSet = async (nodeID: string) => {\n    await new Promise((resolve, reject) =>\n      gunAppGraph\n        .get(nodeID)\n        .put(null, (ack) => (ack.err ? reject(ack.err) : resolve()))\n    );\n  };\n\n  return { collection, addToSet, updateInSet, removeFromSet };\n};\n"],"names":["encryptData","data","keys","sea","encrypt","decryptData","decrypt","debouncedUpdates","dispatcher","timeout","handler","updates","update","push","setTimeout","newStateSlice","reduce","previousState","clearTimeout","reducer","state","Object","nodeID","Error","useIsMounted","isMounted","useRef","useEffect","current","useSafeReducer","initialState","useReducer","args","dispatch","useGunNamespace","gun","useState","namespace","setNamespace","user","Gun","peerList","peers","triggerAuth","on","setIsLoggedIn","namespacedGraph","is","auth","isLoggedIn","initialValue","pair","setKeys","getKeySet","ref","opts","appKeys","interval","useOpen","debouncedHandlers","updater","type","gunCb","encryptedField","message","event","decryptedField","forEach","key","cleanFn","id","gunAppGraph","open","off","length","c","fields","encryptedData","Promise","resolve","reject","put","ack","err","field","encryptedNode","item","map","collection","get","set"],"mappings":"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"}