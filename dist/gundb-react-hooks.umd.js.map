{"version":3,"file":"gundb-react-hooks.umd.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport React, {\n  useState,\n  useEffect,\n  useReducer,\n  useRef,\n  useMemo,\n  useCallback,\n  useContext,\n  createContext,\n} from 'react';\n\n// Enhanced TypeScript definitions\nexport interface IGunChainReference<T = any> {\n  get(key: string): IGunChainReference<T>;\n  put(\n    data: T,\n    callback?: (ack: { err?: string; ok?: any }) => void,\n  ): IGunChainReference<T>;\n  on(\n    callback: (data: T, key: string, message?: any, event?: any) => void,\n  ): () => void;\n  once(callback: (data: T, key: string) => void): void;\n  set(\n    data: T,\n    callback?: (ack: { err?: string; ok?: any }) => void,\n  ): IGunChainReference<T>;\n  map(): IGunChainReference<T>;\n  open?(\n    callback: (data: T, key: string, message?: any, event?: any) => void,\n  ): void;\n  user(soul?: string): IGunUserReference;\n  off(): void;\n  toString(): string;\n}\n\nexport interface IGunUserReference extends IGunChainReference {\n  is: KeyPair | null;\n  auth(keypair: KeyPair, callback?: (ack: any) => void): void;\n  create(keypair: KeyPair, callback?: (ack: any) => void): void;\n  leave(): void;\n}\n\nexport interface GunError {\n  err: string;\n  code?: string | number;\n  context?: string;\n}\n\nexport type ValidGunData = string | number | boolean | object | null;\n\n// Legacy types for backward compatibility\nexport type GunStatic = any;\nexport type GunRef = IGunChainReference | null;\nexport type NamespacedRef = IGunUserReference;\n\nexport type KeyPair = {\n  pub: string;\n  priv: string;\n  epub: string;\n  epriv: string;\n};\n\n// Auth-related types\nexport type Storage = {\n  getItem: (key: string) => any;\n  setItem: (key: string, data: string) => any;\n  removeItem: (key: string) => any;\n};\n\nexport type AuthContextType = {\n  gun: IGunChainReference;\n  user: IGunUserReference;\n  login: (keys?: undefined | string | KeyPair) => void;\n  logout: (onLoggedOut?: () => void) => void;\n  sea: any;\n  appKeys: undefined | string | KeyPair;\n  isLoggedIn: boolean;\n  newGunInstance: (opts?: GunOptions) => IGunChainReference;\n};\n\nexport type AuthProviderOpts = {\n  Gun: any;\n  sea: any;\n  keyFieldName?: string;\n  storage: Storage;\n  gunOpts: GunOptions;\n  children: React.ReactNode;\n};\n\nexport type Options = {\n  appKeys?: undefined | string | KeyPair;\n  sea?: any;\n  interval?: number;\n  useOpen?: boolean;\n};\n\nexport type NodeData<T extends ValidGunData> = T & {\n  readonly nodeID: string;\n  readonly _?: { '#': string; '>': Record<string, number> };\n};\n\n// Enhanced legacy type for backward compatibility\nexport type NodeT<T> = T & { nodeID: string; [key: string]: any };\n\nexport type ActionType<T> =\n  | { type: 'add'; data: NodeT<T> | NodeT<T>[] }\n  | { type: 'update'; data: NodeT<T> }\n  | { type: 'remove'; data: { nodeID: string } };\n\nexport type UpdateType = {\n  id: string;\n  data: any;\n};\n\nexport interface GunOptions\n  extends Partial<{\n    file: string;\n    web: any;\n    s3: {\n      key: any;\n      secret: any;\n      bucket: any;\n    };\n    peers: string[] | Record<string, {}>;\n    radisk: boolean;\n    localStorage: boolean;\n    uuid(): string;\n    [key: string]: any;\n  }> {}\n\nexport interface CollectionState<T> {\n  collection: Map<string, T>;\n  sorted?: T[];\n  infiniteScrolling?: {\n    isFetching: boolean;\n    lastFetched: string;\n    reverse: boolean;\n  };\n}\n\n// Hook return types\nexport interface UseGunStateReturn<T> {\n  fields: T;\n  put: (data: Partial<T>) => Promise<void>;\n  remove: (field: string) => Promise<void>;\n  error: GunError | null;\n  isLoading: boolean;\n  isConnected: boolean;\n}\n\nexport interface UseGunCollectionReturn<T> {\n  collection: Map<string, NodeT<T>>;\n  items: NodeT<T>[];\n  addToSet: (data: T, nodeID?: string) => Promise<void>;\n  updateInSet: (nodeID: string, data: Partial<T>) => Promise<void>;\n  removeFromSet: (nodeID: string) => Promise<void>;\n  error: GunError | null;\n  isLoading: boolean;\n  count: number;\n}\n\nexport interface PaginationOptions<T> extends Options {\n  pageSize?: number;\n  currentPage?: number;\n  sortBy?: keyof T | ((a: NodeT<T>, b: NodeT<T>) => number);\n  sortOrder?: 'asc' | 'desc';\n  filter?: (item: NodeT<T>) => boolean;\n  preloadPages?: number;\n}\n\nexport interface UsePaginatedCollectionReturn<T>\n  extends UseGunCollectionReturn<T> {\n  // Pagination state\n  currentPage: number;\n  totalPages: number;\n  hasNextPage: boolean;\n  hasPrevPage: boolean;\n  pageSize: number;\n\n  // Pagination actions\n  nextPage: () => void;\n  prevPage: () => void;\n  goToPage: (page: number) => void;\n  setPageSize: (size: number) => void;\n\n  // Current page data\n  currentPageItems: NodeT<T>[];\n  currentPageCount: number;\n\n  // Optimizations\n  isLoadingPage: boolean;\n  preloadedPages: Set<number>;\n}\n\nexport const encryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any,\n) => {\n  try {\n    return keys && sea ? await sea.encrypt(data, keys) : data;\n  } catch (error) {\n    console.warn('Failed to encrypt data:', error);\n    return data;\n  }\n};\n\nexport const decryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any,\n) => {\n  try {\n    return keys && sea ? await sea.decrypt(data, keys) : data;\n  } catch (error) {\n    console.warn('Failed to decrypt data:', error);\n    return data;\n  }\n};\n\n// Utility functions\nconst debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n): ((...args: Parameters<T>) => void) => {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(() => func(...args), wait);\n  };\n};\n\nconst validateNodeID = (nodeID: string): void => {\n  if (!nodeID || typeof nodeID !== 'string' || nodeID.trim().length === 0) {\n    throw new Error('Invalid nodeID: must be a non-empty string');\n  }\n};\n\nconst validateData = <T>(data: T, context: string): void => {\n  if (data === undefined) {\n    throw new Error(`Data cannot be undefined in ${context}`);\n  }\n};\n\nconst warnInDevelopment = (condition: boolean, message: string): void => {\n  // @ts-ignore\n  if (typeof window !== 'undefined' && condition) {\n    console.warn(`[GunDB Hooks Warning] ${message}`);\n  }\n};\n\nexport const debouncedUpdates = (\n  dispatcher: any,\n  type = 'object',\n  timeout = 100,\n) => {\n  let updates: any[] = [];\n  let handler: any;\n\n  const updateFunction = (update: UpdateType) => {\n    updates.push(update);\n    if (!handler) {\n      handler = setTimeout(() => {\n        let newStateSlice = updates.reduce(\n          (previousState, { id, data }) => {\n            if (type === 'object') {\n              previousState[id] = data;\n            } else {\n              previousState.set(id, data);\n            }\n            return previousState;\n          },\n          type === 'object' ? {} : new Map(),\n        );\n        dispatcher(newStateSlice);\n        updates = [];\n        handler = null;\n      }, timeout);\n    }\n\n    return () => {\n      clearTimeout(handler);\n      updates = [];\n      handler = null;\n    };\n  };\n\n  // Add cleanup method to the function\n  updateFunction.cleanup = () => {\n    if (handler) {\n      clearTimeout(handler);\n      updates = [];\n      handler = null;\n    }\n  };\n\n  return updateFunction;\n};\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\nexport const nodeReducer = <T>(\n  state: NodeT<T>,\n  { data, type }: ActionType<T>,\n): T => {\n  switch (type) {\n    case 'add':\n      return { ...state, ...data };\n    case 'remove':\n      delete state[data.nodeID];\n      return { ...state };\n    default:\n      throw new Error();\n  }\n};\n\nexport const collectionReducer = <T>(\n  state: CollectionState<T>,\n  { data, type }: ActionType<T>,\n): CollectionState<T> => {\n  switch (type) {\n    case 'add':\n      const newCollectionForAdd = new Map(state.collection);\n      if (Array.isArray(data)) {\n        data.forEach((item: NodeT<T>) => {\n          newCollectionForAdd.set(item.nodeID, item);\n        });\n      } else {\n        newCollectionForAdd.set(data.nodeID, data);\n      }\n      return {\n        ...state,\n        collection: newCollectionForAdd,\n      };\n    case 'update':\n      if (!Array.isArray(data)) {\n        const newCollectionForUpdate = new Map(state.collection);\n        newCollectionForUpdate.set(data.nodeID, data);\n        return {\n          ...state,\n          collection: newCollectionForUpdate,\n        };\n      }\n      return state;\n    case 'remove':\n      const newCollectionForRemove = new Map(state.collection);\n      newCollectionForRemove.delete(data.nodeID);\n      return {\n        ...state,\n        collection: newCollectionForRemove,\n      };\n    default:\n      throw new Error(`Unknown action type: ${type}`);\n  }\n};\n\nexport const useSafeReducer = <T>(\n  reducer: any,\n  initialState: T,\n): [T, Function] => {\n  const [state, dispatch] = useReducer<React.Reducer<T, ActionType<T>>>(\n    reducer,\n    initialState,\n  );\n  const isMounted = useIsMounted();\n\n  function safeDispatch(args: ActionType<T>) {\n    if (isMounted.current) {\n      dispatch(args);\n    }\n  }\n\n  return [state, safeDispatch];\n};\n\nexport const useGun = (Gun: GunStatic, opts: GunOptions) => {\n  const [gun, setGun] = useState(Gun({ ...opts }));\n\n  useEffect(() => {\n    if (opts) {\n      setGun(Gun({ ...opts }));\n    }\n  }, [Gun, opts]);\n\n  return gun;\n};\n\nexport const useGunNamespace = (gun: GunRef, soul?: string) => {\n  const [namespace, setNamespace] = useState(\n    gun && soul ? gun.user(soul) : gun ? gun.user() : null,\n  );\n  useEffect(() => {\n    if (gun && !namespace) {\n      setNamespace(soul ? gun.user(soul) : gun.user());\n    }\n  }, [namespace, gun, soul]);\n  return namespace;\n};\n\nexport const useGunKeyAuth = (\n  gun: GunRef,\n  keys: KeyPair,\n  triggerAuth: boolean = true,\n) => {\n  // Will attempt to perform a login (when triggerAuth is set to true),\n  // or, if false, returns a namespaced gun node\n  const namespacedGraph = useGunNamespace(gun);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState<GunError | null>(null);\n\n  useEffect(() => {\n    if (!gun) return;\n\n    // @ts-ignore - Gun types are not properly defined\n    const off = gun.on('auth', () => {\n      setIsLoggedIn(true);\n      setError(null);\n    });\n\n    // Ensure we always return a function for cleanup\n    return () => {\n      if (typeof off === 'function') {\n        try {\n          off();\n        } catch (e) {}\n      } else if (typeof (gun as any).off === 'function') {\n        try {\n          (gun as any).off();\n        } catch (e) {}\n      }\n    };\n  }, [gun]);\n\n  // Reset isLoggedIn when keys are cleared or triggerAuth is false\n  useEffect(() => {\n    if (!keys || !triggerAuth) {\n      setIsLoggedIn(false);\n      setError(null);\n    }\n  }, [keys, triggerAuth]);\n\n  // Check if user is still authenticated\n  useEffect(() => {\n    if (namespacedGraph && namespacedGraph.is) {\n      setIsLoggedIn(true);\n    } else if (namespacedGraph && !namespacedGraph.is && isLoggedIn) {\n      setIsLoggedIn(false);\n    }\n  }, [namespacedGraph, isLoggedIn]);\n\n  useEffect(() => {\n    if (namespacedGraph && !namespacedGraph.is && keys && triggerAuth) {\n      try {\n        namespacedGraph.auth(keys, (ack: any) => {\n          if (ack.err) {\n            setError({\n              err: ack.err,\n              context: 'useGunKeyAuth.auth',\n            });\n          }\n        });\n      } catch (err) {\n        setError({\n          err: err instanceof Error ? err.message : 'Authentication failed',\n          context: 'useGunKeyAuth',\n        });\n      }\n    }\n  }, [triggerAuth, namespacedGraph, keys]);\n\n  return [namespacedGraph, isLoggedIn, error] as const;\n};\n\nexport const useGunKeys = (\n  sea: any,\n  existingKeys?: KeyPair | undefined | null,\n) => {\n  const [newKeys, setNewKeys] = useState<KeyPair | undefined | null>(\n    existingKeys,\n  );\n\n  useEffect(() => {\n    const getKeySet = async () => {\n      const pair: KeyPair = await sea.pair();\n      setNewKeys(pair);\n    };\n\n    if (!newKeys && !existingKeys) {\n      getKeySet().catch(console.error);\n    }\n\n    if (existingKeys) {\n      setNewKeys(existingKeys);\n    }\n  }, [existingKeys, newKeys, sea]);\n\n  return newKeys;\n};\n\nexport const useGunOnNodeUpdated = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    useOpen: false,\n  },\n  cb: (data: T, nodeID: string) => void,\n  cleanup?: () => void,\n) => {\n  const { appKeys, sea, useOpen } = opts;\n  const handler = useRef<(() => void) | null>(null);\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    if (!ref || !isMounted.current) return;\n\n    const gunCb = async (\n      encryptedField: any,\n      nodeID: string,\n      message: any,\n      event: any,\n    ) => {\n      if (!isMounted.current) return;\n\n      try {\n        let decryptedField = await decryptData(encryptedField, appKeys, sea);\n        cb(decryptedField, nodeID);\n      } catch (error) {\n        console.warn('Failed to decrypt data in useGunOnNodeUpdated:', error);\n      }\n\n      if (!handler.current && event?.off) {\n        handler.current = () => event.off();\n      }\n    };\n\n    if (useOpen) {\n      if (!ref.open) {\n        throw new Error('Please include gun/lib/open.');\n      } else {\n        ref.open(gunCb);\n      }\n    } else {\n      ref.on(gunCb);\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current();\n        handler.current = null;\n      }\n      if (cleanup) {\n        cleanup();\n      }\n    };\n  }, [ref, appKeys, sea, useOpen, cb, cleanup, isMounted]);\n};\n\nexport const useGunState = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  },\n): UseGunStateReturn<T> => {\n  const { appKeys, sea, interval = 100, useOpen } = opts;\n\n  // Memoize the options to prevent unnecessary re-renders\n  const memoizedOpts = useMemo(\n    () => ({\n      appKeys,\n      sea,\n      interval,\n      useOpen,\n    }),\n    [appKeys, sea, interval, useOpen],\n  );\n\n  const [fields, dispatch] = useSafeReducer<T>(nodeReducer, {} as T);\n  const [error, setError] = useState<GunError | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isConnected, setIsConnected] = useState(false);\n\n  const debouncedHandlers = useRef<Function[]>([]);\n  const isMounted = useIsMounted();\n\n  // Development warnings\n  useEffect(() => {\n    warnInDevelopment(!ref, 'useGunState: ref is undefined');\n    warnInDevelopment(\n      !!(appKeys && !sea),\n      'useGunState: appKeys provided but no SEA instance',\n    );\n  }, [ref, appKeys, sea]);\n\n  // Memoized updater - stabilize with useCallback\n  const updater = useCallback(\n    debouncedUpdates(\n      (data: any) => {\n        if (isMounted.current) {\n          dispatch({ type: 'add', data });\n          setIsLoading(false);\n          setIsConnected(true);\n          setError(null);\n        }\n      },\n      'object',\n      interval,\n    ),\n    [interval, isMounted],\n  );\n\n  // Connection timeout\n  useEffect(() => {\n    const connectionTimeout = setTimeout(() => {\n      if (isLoading) {\n        setError({\n          err: 'Connection timeout - no data received',\n          context: 'useGunState connection',\n        });\n        setIsLoading(false);\n      }\n    }, 5000); // 5 second timeout\n\n    return () => clearTimeout(connectionTimeout);\n  }, [isLoading]);\n\n  // Memoized callback to prevent infinite re-renders\n  const nodeUpdateCallback = useCallback(\n    (item: any) => {\n      try {\n        if (item && typeof item === 'object') {\n          Object.keys(item).forEach((key) => {\n            let cleanFn = updater({ id: key, data: item[key] });\n            debouncedHandlers.current.push(cleanFn);\n          });\n        }\n      } catch (err) {\n        setError({\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunState data processing',\n        });\n      }\n    },\n    [updater],\n  );\n\n  // Memoized cleanup callback\n  const cleanupCallback = useCallback(() => {\n    if (debouncedHandlers.current.length) {\n      //cleanup timeouts\n      debouncedHandlers.current.forEach((c) => c());\n      debouncedHandlers.current = [];\n    }\n  }, []);\n\n  useGunOnNodeUpdated(ref, memoizedOpts, nodeUpdateCallback, cleanupCallback);\n\n  // Enhanced put with validation and error handling\n  const put = useCallback(\n    async (data: Partial<T>): Promise<void> => {\n      if (!ref) {\n        throw new Error('useGunState: ref is undefined');\n      }\n\n      try {\n        validateData(data, 'useGunState.put');\n        setError(null);\n\n        let encryptedData = await encryptData(data, appKeys, sea);\n\n        await new Promise<void>((resolve, reject) =>\n          ref.put(encryptedData, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunState.put',\n              };\n              setError(error);\n              reject(error);\n            } else {\n              resolve();\n            }\n          }),\n        );\n      } catch (err) {\n        const error: GunError = {\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunState.put',\n        };\n        setError(error);\n        throw error;\n      }\n    },\n    [ref, appKeys, sea],\n  );\n\n  // Enhanced remove with validation\n  const remove = useCallback(\n    async (field: string): Promise<void> => {\n      if (!ref) {\n        throw new Error('useGunState: ref is undefined');\n      }\n\n      try {\n        validateNodeID(field);\n        setError(null);\n\n        await new Promise<void>((resolve, reject) =>\n          ref.put(null, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunState.remove',\n              };\n              setError(error);\n              reject(error);\n            } else {\n              if (isMounted.current) {\n                dispatch({ type: 'remove', data: { nodeID: field } });\n              }\n              resolve();\n            }\n          }),\n        );\n      } catch (err) {\n        const error: GunError = {\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunState.remove',\n        };\n        setError(error);\n        throw error;\n      }\n    },\n    [ref, isMounted],\n  );\n\n  return {\n    fields,\n    put,\n    remove,\n    error,\n    isLoading,\n    isConnected,\n  };\n};\n\nexport const useGunCollectionState = <T extends Record<string, any>>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  },\n): UseGunCollectionReturn<T> => {\n  const { appKeys, sea, interval = 100, useOpen } = opts;\n\n  // Memoize the options to prevent unnecessary re-renders\n  const memoizedOpts = useMemo(\n    () => ({\n      appKeys,\n      sea,\n      interval,\n      useOpen,\n    }),\n    [appKeys, sea, interval, useOpen],\n  );\n\n  const [{ collection }, dispatch] = useSafeReducer<CollectionState<NodeT<T>>>(\n    collectionReducer,\n    {\n      collection: new Map(),\n    },\n  );\n\n  const [error, setError] = useState<GunError | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const debouncedHandlers = useRef<Function[]>([]);\n  const isMounted = useIsMounted();\n\n  // Early return if ref is null/undefined\n  const hasValidRef = Boolean(ref);\n\n  // Development warnings\n  useEffect(() => {\n    warnInDevelopment(!ref, 'useGunCollectionState: ref is undefined');\n    warnInDevelopment(\n      !!(appKeys && !sea),\n      'useGunCollectionState: appKeys provided but no SEA instance',\n    );\n  }, [ref, appKeys, sea]);\n\n  // Set loading to false if no valid ref\n  useEffect(() => {\n    if (!hasValidRef) {\n      setIsLoading(false);\n    }\n  }, [hasValidRef]);\n\n  // Memoized updater - stabilize with useCallback\n  const updater = useCallback(\n    debouncedUpdates(\n      (dataMap: Map<string, NodeT<T>>) => {\n        if (isMounted.current) {\n          // Convert Map to array of items for batch dispatch\n          const items = Array.from(dataMap.values());\n          dispatch({ type: 'add', data: items });\n          setIsLoading(false);\n          setError(null);\n        }\n      },\n      'map',\n      interval,\n    ),\n    [interval, isMounted],\n  );\n\n  // Connection timeout\n  useEffect(() => {\n    const connectionTimeout = setTimeout(() => {\n      if (isLoading) {\n        setError({\n          err: 'Connection timeout - no data received',\n          context: 'useGunCollectionState connection',\n        });\n        setIsLoading(false);\n      }\n    }, 5000);\n\n    return () => clearTimeout(connectionTimeout);\n  }, [isLoading]);\n\n  // Memoized callback to prevent infinite re-renders\n  const nodeUpdateCallback = useCallback(\n    (item: T, nodeID: string) => {\n      if (item && typeof item === 'object') {\n        try {\n          setError(null);\n          let cleanFn = updater({\n            id: nodeID,\n            data: { ...item, nodeID } as NodeT<T>,\n          });\n          debouncedHandlers.current.push(cleanFn);\n        } catch (err) {\n          setError({\n            err: err instanceof Error ? err.message : 'Unknown error',\n            context: 'useGunCollectionState data processing',\n          });\n        }\n      }\n    },\n    [updater],\n  );\n\n  // Memoized cleanup callback\n  const cleanupCallback = useCallback(() => {\n    if (debouncedHandlers.current.length) {\n      //cleanup timeouts\n      debouncedHandlers.current.forEach((c) => c());\n      debouncedHandlers.current = [];\n    }\n  }, []);\n\n  useGunOnNodeUpdated(\n    ref ? ref.map() : null,\n    memoizedOpts,\n    nodeUpdateCallback,\n    cleanupCallback,\n  );\n\n  // Working with Sets - Enhanced CRUD operations\n\n  const updateInSet = useCallback(\n    async (nodeID: string, data: Partial<T>): Promise<void> => {\n      if (!ref) {\n        throw new Error('useGunCollectionState: ref is undefined');\n      }\n\n      try {\n        validateNodeID(nodeID);\n        validateData(data, 'useGunCollectionState.updateInSet');\n        setError(null);\n\n        let encryptedData = await encryptData(data, appKeys, sea);\n        await new Promise<void>((resolve, reject) =>\n          ref.get(nodeID).put(encryptedData, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunCollectionState.updateInSet',\n              };\n              setError(error);\n              reject(error);\n            } else {\n              if (isMounted.current) {\n                dispatch({\n                  type: 'update',\n                  data: { nodeID, ...data } as NodeT<T>,\n                });\n              }\n              resolve();\n            }\n          }),\n        );\n      } catch (err) {\n        const error: GunError = {\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunCollectionState.updateInSet',\n        };\n        setError(error);\n        throw error;\n      }\n    },\n    [ref, appKeys, sea, isMounted],\n  );\n\n  const addToSet = useCallback(\n    async (data: T, nodeID?: string): Promise<void> => {\n      if (!ref) {\n        throw new Error('useGunCollectionState: ref is undefined');\n      }\n\n      try {\n        validateData(data, 'useGunCollectionState.addToSet');\n        setError(null);\n\n        let encryptedData = await encryptData(data, appKeys, sea);\n\n        const promise = nodeID\n          ? new Promise<void>((resolve, reject) =>\n              ref\n                .get(nodeID)\n                .put(encryptedData, (ack: any) =>\n                  ack.err ? reject(new Error(ack.err)) : resolve(),\n                ),\n            )\n          : new Promise<void>((resolve, reject) =>\n              ref.set(encryptedData, (ack: any) =>\n                ack.err ? reject(new Error(ack.err)) : resolve(),\n              ),\n            );\n\n        await promise;\n      } catch (err) {\n        const error: GunError = {\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunCollectionState.addToSet',\n        };\n        setError(error);\n        throw error;\n      }\n    },\n    [ref, appKeys, sea],\n  );\n\n  const removeFromSet = useCallback(\n    async (nodeID: string): Promise<void> => {\n      if (!ref) {\n        throw new Error('useGunCollectionState: ref is undefined');\n      }\n\n      try {\n        validateNodeID(nodeID);\n        setError(null);\n\n        await new Promise<void>((resolve, reject) =>\n          ref.get(nodeID).put(null, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunCollectionState.removeFromSet',\n              };\n              setError(error);\n              reject(error);\n            } else {\n              if (isMounted.current) {\n                dispatch({ type: 'remove', data: { nodeID } });\n              }\n              resolve();\n            }\n          }),\n        );\n      } catch (err) {\n        const error: GunError = {\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunCollectionState.removeFromSet',\n        };\n        setError(error);\n        throw error;\n      }\n    },\n    [ref, isMounted],\n  );\n\n  // Convert Map to Array for easier consumption\n  const items = useMemo(() => Array.from(collection.values()), [collection]);\n\n  const count = useMemo(() => collection.size, [collection]);\n\n  return {\n    collection,\n    items, // More convenient array access\n    addToSet,\n    updateInSet,\n    removeFromSet,\n    error,\n    isLoading,\n    count,\n  };\n};\n\n// Paginated Collection Hook with Optimizations\nexport const useGunCollectionStatePaginated = <T extends Record<string, any>>(\n  ref: GunRef,\n  paginationOpts: PaginationOptions<T> = {},\n): UsePaginatedCollectionReturn<T> => {\n  const {\n    pageSize = 20,\n    sortBy,\n    sortOrder = 'asc',\n    filter,\n    preloadPages = 1,\n    currentPage: initialPage = 0,\n    appKeys = '',\n    sea = null,\n    interval = 100,\n    useOpen = false,\n  } = paginationOpts;\n\n  // Extract Options for the base collection hook - memoize to prevent infinite re-renders\n  const opts: Options = useMemo(\n    () => ({\n      appKeys,\n      sea,\n      interval,\n      useOpen,\n    }),\n    [appKeys, sea, interval, useOpen],\n  );\n\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [currentPageItems, setCurrentPageItems] = useState<NodeT<T>[]>([]);\n  const [isLoadingPage, setIsLoadingPage] = useState(false);\n  const [totalItems, setTotalItems] = useState(0);\n\n  // Sync currentPage state with initialPage prop when it changes\n  useEffect(() => {\n    setCurrentPage(initialPage);\n  }, [initialPage]);\n\n  // Cache for pages\n  const pageCache = useRef<Map<number, NodeT<T>[]>>(new Map());\n  const cacheTimestamps = useRef<Map<number, number>>(new Map());\n  const CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n\n  // Use original hook for basic collection management\n  const baseCollection = useGunCollectionState<T>(ref, opts);\n\n  // Cache utilities - memoize to prevent re-creation\n  const getCachedPage = useCallback((page: number): NodeT<T>[] | null => {\n    const cached = pageCache.current.get(page);\n    const timestamp = cacheTimestamps.current.get(page);\n\n    if (cached && timestamp && Date.now() - timestamp < CACHE_TTL) {\n      return cached;\n    }\n    return null;\n  }, []);\n\n  const setCachedPage = useCallback((page: number, items: NodeT<T>[]) => {\n    pageCache.current.set(page, items);\n    cacheTimestamps.current.set(page, Date.now());\n  }, []);\n\n  // Process and sort all items - memoize with stable dependencies\n  const processedItems = useMemo(() => {\n    const allItems = Array.from(baseCollection.collection.values());\n\n    // Apply filtering\n    let filteredItems = filter ? allItems.filter(filter) : allItems;\n\n    // Apply sorting\n    if (sortBy) {\n      filteredItems = [...filteredItems].sort((a, b) => {\n        if (typeof sortBy === 'function') {\n          return sortOrder === 'asc' ? sortBy(a, b) : sortBy(b, a);\n        }\n        const aVal = a[sortBy];\n        const bVal = b[sortBy];\n        let comparison = 0;\n        if (aVal < bVal) comparison = -1;\n        else if (aVal > bVal) comparison = 1;\n        return sortOrder === 'asc' ? comparison : -comparison;\n      });\n    }\n\n    return filteredItems;\n  }, [baseCollection.collection, filter, sortBy, sortOrder]);\n\n  // Update total items when processed items change\n  useEffect(() => {\n    setTotalItems(processedItems.length);\n    // Clear cache when data changes significantly\n    pageCache.current.clear();\n    cacheTimestamps.current.clear();\n  }, [processedItems]);\n\n  // Load specific page - memoize to prevent unnecessary recreations\n  const loadPage = useCallback(\n    async (page: number) => {\n      if (page < 0) return;\n\n      setIsLoadingPage(true);\n\n      try {\n        // Check cache first\n        const cached = getCachedPage(page);\n        if (cached) {\n          setCurrentPageItems(cached);\n          setIsLoadingPage(false);\n          return;\n        }\n\n        // Extract page from processed items\n        const startIndex = page * pageSize;\n        const endIndex = startIndex + pageSize;\n        const pageItems = processedItems.slice(startIndex, endIndex);\n\n        // Cache the page\n        setCachedPage(page, pageItems);\n        setCurrentPageItems(pageItems);\n\n        // Preload adjacent pages\n        for (let i = 1; i <= preloadPages; i++) {\n          const nextPage = page + i;\n          const prevPage = page - i;\n\n          setTimeout(() => {\n            if (\n              nextPage * pageSize < processedItems.length &&\n              !getCachedPage(nextPage)\n            ) {\n              const nextStartIndex = nextPage * pageSize;\n              const nextEndIndex = nextStartIndex + pageSize;\n              const nextPageItems = processedItems.slice(\n                nextStartIndex,\n                nextEndIndex,\n              );\n              setCachedPage(nextPage, nextPageItems);\n            }\n          }, 50 * i);\n\n          setTimeout(() => {\n            if (prevPage >= 0 && !getCachedPage(prevPage)) {\n              const prevStartIndex = prevPage * pageSize;\n              const prevEndIndex = prevStartIndex + pageSize;\n              const prevPageItems = processedItems.slice(\n                prevStartIndex,\n                prevEndIndex,\n              );\n              setCachedPage(prevPage, prevPageItems);\n            }\n          }, 50 * i);\n        }\n      } catch (error) {\n        console.error('Failed to load page:', error);\n      } finally {\n        setIsLoadingPage(false);\n      }\n    },\n    [pageSize, processedItems, preloadPages, getCachedPage, setCachedPage],\n  );\n\n  // Pagination calculations - memoize to prevent recalculations\n  const totalPages = useMemo(\n    () => Math.ceil(totalItems / pageSize),\n    [totalItems, pageSize],\n  );\n  const hasNextPage = useMemo(\n    () => currentPage < totalPages - 1,\n    [currentPage, totalPages],\n  );\n  const hasPrevPage = useMemo(() => currentPage > 0, [currentPage]);\n\n  // Pagination controls - memoize to prevent re-creation\n  const nextPage = useCallback(() => {\n    if (hasNextPage) {\n      const newPage = currentPage + 1;\n      setCurrentPage(newPage);\n      loadPage(newPage);\n    }\n  }, [currentPage, hasNextPage, loadPage]);\n\n  const prevPage = useCallback(() => {\n    if (hasPrevPage) {\n      const newPage = currentPage - 1;\n      setCurrentPage(newPage);\n      loadPage(newPage);\n    }\n  }, [currentPage, hasPrevPage, loadPage]);\n\n  const goToPage = useCallback(\n    (page: number) => {\n      if (page >= 0 && page < totalPages) {\n        setCurrentPage(page);\n        loadPage(page);\n      }\n    },\n    [totalPages, loadPage],\n  );\n\n  const setNewPageSize = useCallback(\n    (size: number) => {\n      if (size <= 0) return;\n\n      // Calculate which item we're currently viewing\n      const currentItemIndex = currentPage * pageSize;\n      // Calculate new page number to maintain position\n      const newPage = Math.floor(currentItemIndex / size);\n\n      setCurrentPage(newPage);\n      pageCache.current.clear(); // Clear cache since page size changed\n      cacheTimestamps.current.clear();\n      loadPage(newPage).catch(console.error);\n    },\n    [currentPage, pageSize, loadPage],\n  );\n\n  // Load current page when page changes or data updates\n  useEffect(() => {\n    if (totalPages > 0) {\n      // Ensure current page is valid\n      if (currentPage >= totalPages) {\n        const newPage = Math.max(0, totalPages - 1);\n        setCurrentPage(newPage);\n        loadPage(newPage).catch(console.error);\n      } else {\n        loadPage(currentPage).catch(console.error);\n      }\n    } else if (processedItems.length > 0) {\n      // Even if totalPages calculation isn't ready, try to load the current page\n      loadPage(currentPage).catch(console.error);\n    }\n  }, [currentPage, totalPages, loadPage, processedItems.length]);\n\n  // Initial load effect - ensure pagination happens on mount\n  useEffect(() => {\n    if (processedItems.length > 0) {\n      loadPage(currentPage).catch(console.error);\n    }\n  }, [processedItems.length]); // Only depend on length to avoid infinite re-renders\n\n  // Real-time updates - update cache when base collection changes\n  // Memoize and debounce this to prevent excessive updates\n  const updatePageCache = useMemo(\n    () =>\n      debounce((updatedItem: NodeT<T>) => {\n        // Only update pages that might contain this item\n        pageCache.current.forEach((page, pageNum) => {\n          const itemIndex = page.findIndex(\n            (item) => item.nodeID === updatedItem.nodeID,\n          );\n          if (itemIndex !== -1) {\n            page[itemIndex] = updatedItem;\n            // Trigger re-render only for current page\n            if (pageNum === currentPage) {\n              setCurrentPageItems([...page]);\n            }\n          }\n        });\n      }, 100),\n    [currentPage],\n  );\n\n  // Watch for changes in base collection to update cache\n  useEffect(() => {\n    if (baseCollection.collection) {\n      Array.from(baseCollection.collection.values()).forEach((item) => {\n        updatePageCache(item);\n      });\n    }\n  }, [baseCollection.collection, updatePageCache]);\n\n  // Memoize preloaded pages to prevent object recreation\n  const preloadedPages = useMemo(\n    () => new Set(Array.from(pageCache.current.keys())),\n    [],\n  );\n\n  return {\n    ...baseCollection,\n    // Override items to return paginated items instead of all items\n    items: currentPageItems,\n    // Override count to return total filtered items count\n    count: totalItems,\n    // Pagination state\n    currentPage,\n    totalPages,\n    hasNextPage,\n    hasPrevPage,\n    pageSize,\n    // Pagination actions\n    nextPage,\n    prevPage,\n    goToPage,\n    setPageSize: setNewPageSize,\n    // Current page data\n    currentPageItems,\n    currentPageCount: currentPageItems.length,\n    // Optimizations\n    isLoadingPage,\n    preloadedPages,\n  };\n};\n\n// Auth Context and Provider\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport const AuthProvider: React.FC<AuthProviderOpts> = ({\n  Gun,\n  sea,\n  keyFieldName = 'keys',\n  storage,\n  gunOpts,\n  children,\n}) => {\n  if (!sea || !Gun || !gunOpts) {\n    throw new Error('Provide gunOpts, Gun and sea');\n  }\n\n  const [{ isReadyToAuth, existingKeys, keyStatus }, setStatuses] = useState<{\n    isReadyToAuth: string;\n    existingKeys: KeyPair | null;\n    keyStatus: string;\n  }>({\n    isReadyToAuth: '',\n    existingKeys: null,\n    keyStatus: '',\n  });\n\n  const gun = useGun(Gun, gunOpts);\n  // new keypair\n  const newKeys = useGunKeys(sea);\n  const [user, isLoggedIn] = useGunKeyAuth(\n    gun,\n    existingKeys || undefined,\n    isReadyToAuth === 'ready',\n  );\n\n  useEffect(() => {\n    if (isLoggedIn && existingKeys && keyStatus === 'new') {\n      const storeKeysEffect = async () => {\n        try {\n          await storage.setItem(keyFieldName, JSON.stringify(existingKeys));\n        } catch (error) {\n          console.error('Failed to store keys:', error);\n        }\n      };\n\n      storeKeysEffect();\n    }\n  }, [isLoggedIn, existingKeys, keyFieldName, storage, keyStatus]);\n\n  useEffect(() => {\n    if (!existingKeys) {\n      const getKeys = async () => {\n        try {\n          const k = await storage.getItem(keyFieldName);\n          const ks = JSON.parse(k || 'null');\n          setStatuses({\n            isReadyToAuth: 'ready',\n            existingKeys: ks,\n            keyStatus: ks ? 'existing' : 'new',\n          });\n        } catch (error) {\n          console.warn('Failed to retrieve keys from storage:', error);\n          setStatuses({\n            isReadyToAuth: 'ready',\n            existingKeys: null,\n            keyStatus: 'new',\n          });\n        }\n      };\n      getKeys();\n    }\n  }, [storage, keyFieldName, existingKeys]);\n\n  const login = useCallback(\n    (keys?: undefined | string | KeyPair) => {\n      // use keys sent by the user or a new set\n      setStatuses({\n        isReadyToAuth: 'ready',\n        existingKeys: (keys as KeyPair) || newKeys || null,\n        keyStatus: 'new',\n      });\n    },\n    [setStatuses, newKeys],\n  );\n\n  const logout = useCallback(\n    (onLoggedOut?: () => void) => {\n      const removeKeys = async () => {\n        try {\n          // Call user.leave() first to properly logout from Gun\n          if (user && user.leave) {\n            user.leave();\n          }\n\n          // Remove keys from storage\n          await storage.removeItem(keyFieldName);\n\n          // Reset the authentication state\n          setStatuses({\n            isReadyToAuth: '',\n            existingKeys: null,\n            keyStatus: '',\n          });\n\n          // Call the callback if provided\n          if (onLoggedOut) {\n            onLoggedOut();\n          }\n        } catch (error) {\n          console.warn('Failed to remove keys from storage:', error);\n          // Still call the callback even if storage removal fails\n          if (onLoggedOut) {\n            onLoggedOut();\n          }\n        }\n      };\n      removeKeys();\n    },\n    [keyFieldName, storage, user],\n  );\n\n  const newGunInstance = useCallback(\n    (opts: GunOptions = gunOpts) => {\n      return Gun(opts);\n    },\n    [Gun, gunOpts],\n  );\n\n  const value = useMemo<AuthContextType>(\n    () => ({\n      gun,\n      user,\n      login,\n      logout,\n      sea,\n      appKeys: existingKeys || newKeys,\n      isLoggedIn,\n      newGunInstance,\n    }),\n    [\n      gun,\n      user,\n      login,\n      logout,\n      sea,\n      newKeys,\n      existingKeys,\n      isLoggedIn,\n      newGunInstance,\n    ],\n  );\n\n  return React.createElement(AuthContext.Provider, { value }, children);\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Context provider for Gun instance\nexport const GunContext = createContext<IGunChainReference | null>(null);\n\nconst safeStringifyOptions = (options: GunOptions): string => {\n  try {\n    return JSON.stringify(options, (key, value) => {\n      // Skip circular references and functions\n      if (\n        typeof value === 'function' ||\n        (typeof value === 'object' &&\n          value !== null &&\n          value.constructor?.name?.includes('Gun'))\n      ) {\n        return '[Circular/Function]';\n      }\n      return value;\n    });\n  } catch (err) {\n    return String(Math.random()); // Force re-render if serialization fails\n  }\n};\n\nexport const GunProvider: React.FC<{\n  gun: GunStatic;\n  options: GunOptions;\n  children: React.ReactNode;\n}> = ({ gun, options, children }) => {\n  const memoizedOptions = useMemo(\n    () => safeStringifyOptions(options),\n    [options],\n  );\n  const gunInstance = useMemo(() => {\n    try {\n      return gun(memoizedOptions);\n    } catch (err) {\n      console.error('Failed to initialize Gun instance:', err);\n      return null;\n    }\n  }, [gun, memoizedOptions]);\n\n  return React.createElement(\n    GunContext.Provider,\n    { value: gunInstance },\n    children,\n  );\n};\n\nexport const useGunContext = (): IGunChainReference => {\n  const context = useContext(GunContext);\n  if (!context) {\n    throw new Error('useGunContext must be used within a GunProvider');\n  }\n  return context;\n};\n\n// Debug utility hook\nexport const useGunDebug = (\n  ref: IGunChainReference | null,\n  label: string,\n  enabled: boolean = true,\n): void => {\n  useEffect(() => {\n    if (!enabled || !ref) return;\n\n    console.log(`[GunDB Debug - ${label}] Listening to:`, ref);\n\n    // subscribe\n    const off = ref.on((data, key) => {\n      console.log(`[${label}] Update:`, {\n        key,\n        data,\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    // cleanup\n    return () => {\n      if (typeof off === 'function') {\n        try {\n          off();\n        } catch (e) {}\n      } else if (typeof (ref as any).off === 'function') {\n        try {\n          (ref as any).off();\n        } catch (e) {}\n      }\n    };\n  }, [ref, label, enabled]);\n};\n\n// Connection status hook\nexport const useGunConnection = (\n  ref: IGunChainReference,\n): {\n  isConnected: boolean;\n  lastSeen: Date | null;\n  error: GunError | null;\n} => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastSeen, setLastSeen] = useState<Date | null>(null);\n  const [error, setError] = useState<GunError | null>(null);\n\n  useEffect(() => {\n    if (!ref) return;\n\n    let timeoutId: number;\n\n    const resetTimeout = () => {\n      clearTimeout(timeoutId);\n      timeoutId = window.setTimeout(() => {\n        setIsConnected(false);\n        setError({\n          err: 'Connection timeout',\n          context: 'useGunConnection',\n        });\n      }, 10000); // 10 second timeout\n    };\n\n    // subscribe\n    const off = ref.on(() => {\n      setIsConnected(true);\n      setLastSeen(new Date());\n      setError(null);\n      resetTimeout();\n    });\n\n    // Initial timeout\n    resetTimeout();\n\n    return () => {\n      clearTimeout(timeoutId);\n      if (typeof off === 'function') {\n        try {\n          off();\n        } catch (e) {}\n      } else if (typeof (ref as any).off === 'function') {\n        try {\n          (ref as any).off();\n        } catch (e) {}\n      }\n    };\n  }, [ref]);\n\n  return { isConnected, lastSeen, error };\n};\n"],"names":["body","recover","result","e","then","encryptData","data","keys","sea","Promise","resolve","_catch","encrypt","error","console","warn","reject","decryptData","decrypt","debounce","func","wait","timeout","_arguments","arguments","clearTimeout","setTimeout","apply","slice","call","validateNodeID","nodeID","trim","length","Error","validateData","context","undefined","warnInDevelopment","condition","message","window","debouncedUpdates","dispatcher","type","updates","handler","updateFunction","update","push","newStateSlice","reduce","previousState","_ref","id","set","Map","cleanup","useIsMounted","isMounted","useRef","useEffect","current","nodeReducer","state","_ref2","_extends","collectionReducer","_ref3","newCollectionForAdd","collection","Array","isArray","forEach","item","newCollectionForUpdate","newCollectionForRemove","useSafeReducer","reducer","initialState","_useReducer","useReducer","dispatch","safeDispatch","args","useGun","Gun","opts","_useState","useState","gun","setGun","useGunNamespace","soul","_useState2","user","namespace","setNamespace","useGunKeyAuth","triggerAuth","namespacedGraph","_useState3","isLoggedIn","setIsLoggedIn","_useState4","setError","off","on","is","auth","ack","err","useGunKeys","existingKeys","_useState5","newKeys","setNewKeys","getKeySet","pair","useGunOnNodeUpdated","ref","cb","appKeys","useOpen","_opts","gunCb","encryptedField","event","_temp2","_temp","decryptedField","open","useGunState","interval","_opts2","_opts2$interval","memoizedOpts","useMemo","_useSafeReducer","fields","_useState6","_useState7","isLoading","setIsLoading","_useState8","isConnected","setIsConnected","debouncedHandlers","updater","useCallback","connectionTimeout","nodeUpdateCallback","Object","key","cleanFn","cleanupCallback","c","put","encryptedData","remove","field","useGunCollectionState","_opts3","_opts3$interval","_useSafeReducer2","_useState9","_useState10","hasValidRef","Boolean","dataMap","items","from","values","map","updateInSet","get","addToSet","promise","removeFromSet","count","size","useGunCollectionStatePaginated","paginationOpts","_paginationOpts","_paginationOpts$pageS","pageSize","sortBy","_paginationOpts$sortO","sortOrder","filter","_paginationOpts$prelo","preloadPages","_paginationOpts$curre","currentPage","initialPage","_paginationOpts$appKe","_paginationOpts$sea","_paginationOpts$inter","_paginationOpts$useOp","_useState11","setCurrentPage","_useState12","currentPageItems","setCurrentPageItems","_useState13","isLoadingPage","setIsLoadingPage","_useState14","totalItems","setTotalItems","pageCache","cacheTimestamps","CACHE_TTL","baseCollection","getCachedPage","page","cached","timestamp","Date","now","setCachedPage","processedItems","allItems","filteredItems","concat","sort","a","b","aVal","bVal","comparison","clear","loadPage","startIndex","endIndex","pageItems","_loop","nextPage","i","prevPage","nextStartIndex","nextEndIndex","nextPageItems","prevStartIndex","prevEndIndex","prevPageItems","totalPages","Math","ceil","hasNextPage","hasPrevPage","newPage","goToPage","setNewPageSize","currentItemIndex","floor","max","updatePageCache","updatedItem","pageNum","itemIndex","findIndex","preloadedPages","Set","setPageSize","currentPageCount","AuthContext","createContext","AuthProvider","_ref4","_ref4$keyFieldName","keyFieldName","storage","gunOpts","children","_useState15","isReadyToAuth","keyStatus","_useState15$","setStatuses","_useGunKeyAuth","storeKeysEffect","_temp3","setItem","JSON","stringify","getKeys","_temp4","getItem","k","ks","parse","login","logout","onLoggedOut","removeKeys","_temp5","leave","removeItem","newGunInstance","value","React","createElement","Provider","useAuth","useContext","GunContext","safeStringifyOptions","options","_value$constructor","constructor","name","includes","String","random","GunProvider","_ref5","memoizedOptions","gunInstance","useGunContext","useGunDebug","label","enabled","log","toISOString","useGunConnection","_useState16","_useState17","lastSeen","setLastSeen","_useState18","timeoutId","resetTimeout"],"mappings":"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"}