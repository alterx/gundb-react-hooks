{"version":3,"file":"gundb-react-hooks.umd.js","sources":["../src/index.ts"],"sourcesContent":["import React, { useState, useEffect, useReducer, useRef } from 'react';\n\nexport type GunStatic = any;\n\nexport type GunRef = any;\n\nexport type NamespacedRef = any;\n\nexport type KeyPair = {\n  pub: string;\n  priv: string;\n  epub: string;\n  epriv: string;\n};\n\nexport type Options = {\n  appKeys?: undefined | string | KeyPair;\n  sea?: any;\n  interval?: number;\n  useOpen?: boolean;\n};\n\nexport type NodeT<T> = T & { nodeID: string; [key: string]: any };\n\nexport type ActionType<T> =\n  | { type: 'add'; data: NodeT<T> }\n  | { type: 'update'; data: NodeT<T> }\n  | { type: 'remove'; data: NodeT<T> };\n\nexport type UpdateType = {\n  id: string;\n  data: any;\n};\n\nexport interface GunOptions\n  extends Partial<{\n    file: string;\n    web: any;\n    s3: {\n      key: any;\n      secret: any;\n      bucket: any;\n    };\n    peers: string[] | Record<string, {}>;\n    radisk: boolean;\n    localStorage: boolean;\n    uuid(): string;\n    [key: string]: any;\n  }> {}\n\nexport interface CollectionState<T>\n  extends Partial<{\n    collection: Map<string, T>;\n    sorted: T[];\n    infiniteScrolling: {\n      isFetching: boolean;\n      lastFetched: string;\n      reverse: boolean;\n    };\n  }> {}\n\nexport const encryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  return keys && sea ? sea.encrypt(data, keys) : Promise.resolve(data);\n};\n\nexport const decryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  return keys && sea ? sea.decrypt(data, keys) : Promise.resolve(data);\n};\n\nexport const debouncedUpdates = (\n  dispatcher: any,\n  type = 'object',\n  timeout = 100\n) => {\n  let updates: any[] = [];\n  let handler: any;\n  return (update: UpdateType) => {\n    updates.push(update);\n    if (!handler) {\n      handler = setTimeout(() => {\n        let newStateSlice = updates.reduce(\n          (previousState, { id, data }) => {\n            if (type === 'object') {\n              previousState[id] = data;\n            } else {\n              previousState.set(id, data);\n            }\n            return previousState;\n          },\n          type === 'object' ? {} : new Map()\n        );\n        dispatcher(newStateSlice);\n        updates = [];\n        handler = null;\n      }, timeout);\n    }\n\n    return () => {\n      clearTimeout(handler);\n      updates = [];\n      handler = null;\n    };\n  };\n};\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\nexport const nodeReducer = <T>(\n  state: NodeT<T>,\n  { data, type }: ActionType<T>\n): T => {\n  switch (type) {\n    case 'add':\n      return { ...state, ...data };\n    case 'remove':\n      delete state[data.nodeID];\n      return { ...state };\n    default:\n      throw new Error();\n  }\n};\n\nexport const collectionReducer = <T>(\n  state: CollectionState<T>,\n  { data, type }: ActionType<T>\n): CollectionState<T> => {\n  switch (type) {\n    case 'add':\n      data.forEach((data: NodeT<T>) => {\n        state.collection?.set(data.nodeID, data);\n      });\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    case 'update':\n      state.collection?.set(data.nodeID, data);\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    case 'remove':\n      state.collection?.delete(data.nodeID);\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nexport const useSafeReducer = <T>(\n  reducer: any,\n  initialState: T\n): [T, Function] => {\n  const [state, dispatch] = useReducer<React.Reducer<T, ActionType<T>>>(\n    reducer,\n    initialState\n  );\n  const isMounted = useIsMounted();\n\n  function safeDispatch(args: ActionType<T>) {\n    if (isMounted.current) {\n      dispatch(args);\n    }\n  }\n\n  return [state, safeDispatch];\n};\n\nexport const useGun = (Gun: GunStatic, opts: GunOptions) => {\n  const [gun, setGun] = useState(Gun({ ...opts }));\n\n  useEffect(() => {\n    if (opts) {\n      setGun(Gun({ ...opts }));\n    }\n  }, [Gun, opts]);\n\n  return gun;\n};\n\nexport const useGunNamespace = (gun: GunRef, soul?: string) => {\n  const [namespace, setNamespace] = useState(\n    soul ? gun.user(soul) : gun.user()\n  );\n  useEffect(() => {\n    if (gun && !namespace) {\n      setNamespace(soul ? gun.user(soul) : gun.user());\n    }\n  }, [namespace, gun, soul]);\n  return namespace;\n};\n\nexport const useGunKeyAuth = (\n  gun: GunRef,\n  keys: KeyPair,\n  triggerAuth: boolean = true\n) => {\n  // Will attempt to perform a login (when triggerAuth is set to true),\n  // or, if false, returns a namespaced gun node\n  const namespacedGraph = useGunNamespace(gun);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  gun.on('auth', () => {\n    setIsLoggedIn(true);\n  });\n\n  useEffect(() => {\n    if (namespacedGraph && !namespacedGraph.is && keys && triggerAuth) {\n      namespacedGraph.auth(keys);\n    }\n  }, [triggerAuth, namespacedGraph, keys]);\n\n  return [namespacedGraph, isLoggedIn];\n};\n\nexport const useGunKeys = (\n  sea: any,\n  existingKeys?: KeyPair | undefined | null\n) => {\n  const [newKeys, setNewKeys] = useState<KeyPair | undefined | null>(\n    existingKeys\n  );\n\n  useEffect(() => {\n    async function getKeySet() {\n      const pair: KeyPair = await sea.pair();\n      setNewKeys(pair);\n    }\n\n    if (!newKeys && !existingKeys) {\n      getKeySet();\n    }\n\n    if (existingKeys) {\n      setNewKeys(existingKeys);\n    }\n  }, [existingKeys, newKeys, sea]);\n\n  return newKeys;\n};\n\nexport const useGunOnNodeUpdated = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    useOpen: false,\n  },\n  cb: (data: T, nodeID: string) => void,\n  cleanup?: () => void\n) => {\n  const { appKeys, sea, useOpen } = opts;\n  const handler = useRef(null);\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const gunCb = async (\n        encryptedField: any,\n        nodeID: string,\n        message: any,\n        event: any\n      ) => {\n        let decryptedField = await decryptData(encryptedField, appKeys, sea);\n        cb(decryptedField, nodeID);\n\n        if (!handler.current) {\n          handler.current = event;\n        }\n      };\n\n      if (useOpen) {\n        if (!ref.open) {\n          throw new Error('Please include gun/lib/open.');\n        } else {\n          ref.open(gunCb);\n        }\n      } else {\n        ref.on(gunCb);\n      }\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current.off();\n      }\n      if (cleanup) {\n        cleanup();\n      }\n    };\n  }, [ref]);\n};\n\nexport const useGunState = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n) => {\n  const { appKeys, sea, interval = 100 } = opts;\n  const [fields, dispatch] = useSafeReducer<T>(nodeReducer, {} as T);\n\n  const debouncedHandlers: Function[] = [];\n  const updater = debouncedUpdates(\n    (data: any) => {\n      dispatch({ type: 'add', data });\n    },\n    'object',\n    interval\n  );\n\n  useGunOnNodeUpdated(\n    ref,\n    opts,\n    (item: any) => {\n      Object.keys(item).forEach((key) => {\n        let cleanFn = updater({ id: key, data: item[key] });\n        debouncedHandlers.push(cleanFn);\n      });\n    },\n    () => {\n      if (debouncedHandlers.length) {\n        //cleanup timeouts\n        debouncedHandlers.forEach((c) => c());\n      }\n    }\n  );\n\n  // Working with root node fields\n  const put = async (data: T) => {\n    let encryptedData = await encryptData(data, appKeys, sea);\n    await new Promise((resolve, reject) =>\n      ref.put(encryptedData, (ack: any) =>\n        ack.err ? reject(ack.err) : resolve(data)\n      )\n    );\n  };\n\n  const remove = async (field: string) => {\n    await new Promise((resolve, reject) =>\n      ref.put(null, (ack: any) => (ack.err ? reject(ack.err) : resolve(field)))\n    );\n    dispatch({ type: 'remove', data: { nodeID: field } });\n  };\n\n  return { fields, put, remove };\n};\n\nexport const useGunCollectionState = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n) => {\n  const { appKeys, sea, interval = 100 } = opts;\n  const [{ collection }, dispatch] = useSafeReducer<CollectionState<T>>(\n    collectionReducer,\n    {\n      collection: new Map(),\n    }\n  );\n\n  const debouncedHandlers: Function[] = [];\n  const updater = debouncedUpdates(\n    (data: T) => {\n      dispatch({ type: 'add', data });\n    },\n    'map',\n    interval\n  );\n\n  useGunOnNodeUpdated(\n    ref.map(),\n    opts,\n    (item: T, nodeID) => {\n      if (item) {\n        let cleanFn = updater({\n          id: nodeID,\n          data: { ...item, nodeID },\n        });\n        debouncedHandlers.push(cleanFn);\n      }\n    },\n    () => {\n      if (debouncedHandlers.length) {\n        //cleanup timeouts\n        debouncedHandlers.forEach((c) => c());\n      }\n    }\n  );\n\n  // Working with Sets\n\n  const updateInSet = async (nodeID: string, data: T) => {\n    let encryptedData = await encryptData(data, appKeys, sea);\n    await new Promise((resolve, reject) =>\n      ref\n        .get(nodeID)\n        .put(encryptedData, (ack: any) =>\n          ack.err ? reject(ack.err) : resolve(data)\n        )\n    );\n    dispatch({ type: 'update', data: { nodeID, ...data } });\n  };\n\n  const addToSet = async (data: T, nodeID?: string) => {\n    let encryptedData = await encryptData(data, appKeys, sea);\n    if (!nodeID) {\n      await new Promise((resolve, reject) =>\n        ref.set(encryptedData, (ack: any) =>\n          ack.err ? reject(ack.err) : resolve(data)\n        )\n      );\n    } else {\n      await new Promise((resolve, reject) =>\n        ref\n          .get(nodeID)\n          .put(encryptedData, (ack: any) =>\n            ack.err ? reject(ack.err) : resolve(data)\n          )\n      );\n    }\n  };\n\n  const removeFromSet = async (nodeID: string) => {\n    await new Promise((resolve, reject) =>\n      ref\n        .get(nodeID)\n        .put(null, (ack: any) => (ack.err ? reject(ack.err) : resolve(nodeID)))\n    );\n    dispatch({ type: 'remove', data: { nodeID } });\n  };\n\n  return { collection, addToSet, updateInSet, removeFromSet };\n};\n"],"names":["encryptData","data","keys","sea","Promise","resolve","encrypt","e","reject","decryptData","decrypt","debouncedUpdates","dispatcher","type","timeout","updates","handler","update","push","setTimeout","newStateSlice","reduce","previousState","_ref","id","set","Map","clearTimeout","useIsMounted","isMounted","useRef","useEffect","current","nodeReducer","state","_ref2","_extends","nodeID","Error","collectionReducer","_ref3","_state$collection2","_state$collection3","forEach","_state$collection","collection","useSafeReducer","reducer","initialState","_useReducer","useReducer","dispatch","safeDispatch","args","useGun","Gun","opts","_useState","useState","gun","setGun","useGunNamespace","soul","_useState2","user","namespace","setNamespace","useGunKeyAuth","triggerAuth","namespacedGraph","_useState3","isLoggedIn","setIsLoggedIn","on","is","auth","useGunKeys","existingKeys","_useState4","newKeys","setNewKeys","getKeySet","pair","then","useGunOnNodeUpdated","ref","cb","cleanup","appKeys","useOpen","_opts","gunCb","encryptedField","message","event","decryptedField","open","off","useGunState","interval","_opts2","_opts2$interval","_useSafeReducer","fields","debouncedHandlers","updater","item","Object","key","cleanFn","length","c","put","encryptedData","ack","err","remove","field","useGunCollectionState","_opts3","_opts3$interval","_useSafeReducer2","map","updateInSet","get","addToSet","_temp","removeFromSet"],"mappings":"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"}