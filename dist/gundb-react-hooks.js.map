{"version":3,"file":"gundb-react-hooks.js","sources":["../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport React, { useState, useEffect, useReducer, useRef, useMemo, useCallback, useContext, createContext } from 'react';\n\n// Enhanced TypeScript definitions\nexport interface IGunChainReference<T = any> {\n  get(key: string): IGunChainReference<T>;\n  put(data: T, callback?: (ack: { err?: string; ok?: any }) => void): IGunChainReference<T>;\n  on(callback: (data: T, key: string, message?: any, event?: any) => void): () => void;\n  once(callback: (data: T, key: string) => void): void;\n  set(data: T, callback?: (ack: { err?: string; ok?: any }) => void): IGunChainReference<T>;\n  map(): IGunChainReference<T>;\n  open?(callback: (data: T, key: string, message?: any, event?: any) => void): void;\n  user(soul?: string): IGunUserReference;\n  off(): void;\n  toString(): string;\n}\n\nexport interface IGunUserReference extends IGunChainReference {\n  is: KeyPair | null;\n  auth(keypair: KeyPair, callback?: (ack: any) => void): void;\n  create(keypair: KeyPair, callback?: (ack: any) => void): void;\n  leave(): void;\n}\n\nexport interface GunError {\n  err: string;\n  code?: string | number;\n  context?: string;\n}\n\nexport type ValidGunData = string | number | boolean | object | null;\n\n// Legacy types for backward compatibility\nexport type GunStatic = any;\nexport type GunRef = IGunChainReference;\nexport type NamespacedRef = IGunUserReference;\n\nexport type KeyPair = {\n  pub: string;\n  priv: string;\n  epub: string;\n  epriv: string;\n};\n\n// Auth-related types\nexport type Storage = {\n  getItem: (key: string) => any;\n  setItem: (key: string, data: string) => any;\n  removeItem: (key: string) => any;\n};\n\nexport type AuthContextType = {\n  gun: IGunChainReference;\n  user: IGunUserReference;\n  login: (keys?: undefined | string | KeyPair) => void;\n  logout: (onLoggedOut?: () => void) => void;\n  sea: any;\n  appKeys: undefined | string | KeyPair;\n  isLoggedIn: boolean;\n  newGunInstance: (opts?: GunOptions) => IGunChainReference;\n};\n\nexport type AuthProviderOpts = {\n  Gun: any;\n  sea: any;\n  keyFieldName?: string;\n  storage: Storage;\n  gunOpts: GunOptions;\n  children: React.ReactNode;\n};\n\nexport type Options = {\n  appKeys?: undefined | string | KeyPair;\n  sea?: any;\n  interval?: number;\n  useOpen?: boolean;\n};\n\nexport type NodeData<T extends ValidGunData> = T & { \n  readonly nodeID: string; \n  readonly _?: { '#': string; '>': Record<string, number> };\n};\n\n// Enhanced legacy type for backward compatibility\nexport type NodeT<T> = T & { nodeID: string; [key: string]: any };\n\nexport type ActionType<T> =\n  | { type: 'add'; data: NodeT<T> | NodeT<T>[] }\n  | { type: 'update'; data: NodeT<T> }\n  | { type: 'remove'; data: { nodeID: string } };\n\nexport type UpdateType = {\n  id: string;\n  data: any;\n};\n\nexport interface GunOptions\n  extends Partial<{\n    file: string;\n    web: any;\n    s3: {\n      key: any;\n      secret: any;\n      bucket: any;\n    };\n    peers: string[] | Record<string, {}>;\n    radisk: boolean;\n    localStorage: boolean;\n    uuid(): string;\n    [key: string]: any;\n  }> {}\n\nexport interface CollectionState<T>\n  extends Partial<{\n    collection: Map<string, T>;\n    sorted: T[];\n    infiniteScrolling: {\n      isFetching: boolean;\n      lastFetched: string;\n      reverse: boolean;\n    };\n  }> {}\n\n// Hook return types\nexport interface UseGunStateReturn<T> {\n  fields: T;\n  put: (data: Partial<T>) => Promise<void>;\n  remove: (field: string) => Promise<void>;\n  error: GunError | null;\n  isLoading: boolean;\n  isConnected: boolean;\n}\n\nexport interface UseGunCollectionReturn<T> {\n  collection: Map<string, NodeT<T>> | undefined;\n  items: NodeT<T>[];\n  addToSet: (data: T, nodeID?: string) => Promise<void>;\n  updateInSet: (nodeID: string, data: Partial<T>) => Promise<void>;\n  removeFromSet: (nodeID: string) => Promise<void>;\n  error: GunError | null;\n  isLoading: boolean;\n  count: number;\n}\n\nexport const encryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  try {\n    return keys && sea ? await sea.encrypt(data, keys) : data;\n  } catch (error) {\n    console.warn('Failed to encrypt data:', error);\n    return data;\n  }\n};\n\nexport const decryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  try {\n    return keys && sea ? await sea.decrypt(data, keys) : data;\n  } catch (error) {\n    console.warn('Failed to decrypt data:', error);\n    return data;\n  }\n};\n\n// Utility functions\nconst validateNodeID = (nodeID: string): void => {\n  if (!nodeID || typeof nodeID !== 'string' || nodeID.trim().length === 0) {\n    throw new Error('Invalid nodeID: must be a non-empty string');\n  }\n};\n\nconst validateData = <T>(data: T, context: string): void => {\n  if (data === undefined) {\n    throw new Error(`Data cannot be undefined in ${context}`);\n  }\n};\n\nconst warnInDevelopment = (condition: boolean, message: string): void => {\n  // @ts-ignore\n  if (typeof window !== 'undefined' && condition) {\n    console.warn(`[GunDB Hooks Warning] ${message}`);\n  }\n};\n\nexport const debouncedUpdates = (\n  dispatcher: any,\n  type = 'object',\n  timeout = 100\n) => {\n  let updates: any[] = [];\n  let handler: any;\n  return (update: UpdateType) => {\n    updates.push(update);\n    if (!handler) {\n      handler = setTimeout(() => {\n        let newStateSlice = updates.reduce(\n          (previousState, { id, data }) => {\n            if (type === 'object') {\n              previousState[id] = data;\n            } else {\n              previousState.set(id, data);\n            }\n            return previousState;\n          },\n          type === 'object' ? {} : new Map()\n        );\n        dispatcher(newStateSlice);\n        updates = [];\n        handler = null;\n      }, timeout);\n    }\n\n    return () => {\n      clearTimeout(handler);\n      updates = [];\n      handler = null;\n    };\n  };\n};\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\nexport const nodeReducer = <T>(\n  state: NodeT<T>,\n  { data, type }: ActionType<T>\n): T => {\n  switch (type) {\n    case 'add':\n      return { ...state, ...data };\n    case 'remove':\n      delete state[data.nodeID];\n      return { ...state };\n    default:\n      throw new Error();\n  }\n};\n\nexport const collectionReducer = <T>(\n  state: CollectionState<T>,\n  { data, type }: ActionType<T>\n): CollectionState<T> => {\n  switch (type) {\n    case 'add':\n      if (Array.isArray(data)) {\n        data.forEach((item: NodeT<T>) => {\n          state.collection?.set(item.nodeID, item);\n        });\n      } else {\n        state.collection?.set(data.nodeID, data);\n      }\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    case 'update':\n      if (!Array.isArray(data)) {\n        state.collection?.set(data.nodeID, data);\n      }\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    case 'remove':\n      state.collection?.delete(data.nodeID);\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    default:\n      throw new Error(`Unknown action type: ${type}`);\n  }\n};\n\nexport const useSafeReducer = <T>(\n  reducer: any,\n  initialState: T\n): [T, Function] => {\n  const [state, dispatch] = useReducer<React.Reducer<T, ActionType<T>>>(\n    reducer,\n    initialState\n  );\n  const isMounted = useIsMounted();\n\n  function safeDispatch(args: ActionType<T>) {\n    if (isMounted.current) {\n      dispatch(args);\n    }\n  }\n\n  return [state, safeDispatch];\n};\n\nexport const useGun = (Gun: GunStatic, opts: GunOptions) => {\n  const [gun, setGun] = useState(Gun({ ...opts }));\n\n  useEffect(() => {\n    if (opts) {\n      setGun(Gun({ ...opts }));\n    }\n  }, [Gun, opts]);\n\n  return gun;\n};\n\nexport const useGunNamespace = (gun: GunRef, soul?: string) => {\n  const [namespace, setNamespace] = useState(\n    soul ? gun.user(soul) : gun.user()\n  );\n  useEffect(() => {\n    if (gun && !namespace) {\n      setNamespace(soul ? gun.user(soul) : gun.user());\n    }\n  }, [namespace, gun, soul]);\n  return namespace;\n};\n\nexport const useGunKeyAuth = (\n  gun: GunRef,\n  keys: KeyPair,\n  triggerAuth: boolean = true\n) => {\n  // Will attempt to perform a login (when triggerAuth is set to true),\n  // or, if false, returns a namespaced gun node\n  const namespacedGraph = useGunNamespace(gun);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState<GunError | null>(null);\n\n  useEffect(() => {\n    if (!gun) return;\n    \n    // @ts-ignore - Gun types are not properly defined\n    const cleanup = gun.on('auth', () => {\n      setIsLoggedIn(true);\n      setError(null);\n    });\n\n    return cleanup;\n  }, [gun]);\n\n  useEffect(() => {\n    if (namespacedGraph && !namespacedGraph.is && keys && triggerAuth) {\n      try {\n        namespacedGraph.auth(keys, (ack: any) => {\n          if (ack.err) {\n            setError({\n              err: ack.err,\n              context: 'useGunKeyAuth.auth'\n            });\n          }\n        });\n      } catch (err) {\n        setError({\n          err: err instanceof Error ? err.message : 'Authentication failed',\n          context: 'useGunKeyAuth'\n        });\n      }\n    }\n  }, [triggerAuth, namespacedGraph, keys]);\n\n  return [namespacedGraph, isLoggedIn, error] as const;\n};\n\nexport const useGunKeys = (\n  sea: any,\n  existingKeys?: KeyPair | undefined | null\n) => {\n  const [newKeys, setNewKeys] = useState<KeyPair | undefined | null>(\n    existingKeys\n  );\n\n  useEffect(() => {\n    async function getKeySet() {\n      const pair: KeyPair = await sea.pair();\n      setNewKeys(pair);\n    }\n\n    if (!newKeys && !existingKeys) {\n      getKeySet();\n    }\n\n    if (existingKeys) {\n      setNewKeys(existingKeys);\n    }\n  }, [existingKeys, newKeys, sea]);\n\n  return newKeys;\n};\n\nexport const useGunOnNodeUpdated = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    useOpen: false,\n  },\n  cb: (data: T, nodeID: string) => void,\n  cleanup?: () => void\n) => {\n  const { appKeys, sea, useOpen } = opts;\n  const handler = useRef<(() => void) | null>(null);\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    if (!ref || !isMounted.current) return;\n\n    const gunCb = async (\n      encryptedField: any,\n      nodeID: string,\n      message: any,\n      event: any\n    ) => {\n      if (!isMounted.current) return;\n      \n      try {\n        let decryptedField = await decryptData(encryptedField, appKeys, sea);\n        cb(decryptedField, nodeID);\n      } catch (error) {\n        console.warn('Failed to decrypt data in useGunOnNodeUpdated:', error);\n      }\n\n      if (!handler.current && event?.off) {\n        handler.current = () => event.off();\n      }\n    };\n\n    if (useOpen) {\n      if (!ref.open) {\n        throw new Error('Please include gun/lib/open.');\n      } else {\n        ref.open(gunCb);\n      }\n    } else {\n      ref.on(gunCb);\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current();\n        handler.current = null;\n      }\n      if (cleanup) {\n        cleanup();\n      }\n    };\n  }, [ref, appKeys, sea, useOpen, cb, cleanup, isMounted]);\n};\n\nexport const useGunState = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n): UseGunStateReturn<T> => {\n  const { appKeys, sea, interval = 100 } = opts;\n  const [fields, dispatch] = useSafeReducer<T>(nodeReducer, {} as T);\n  const [error, setError] = useState<GunError | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isConnected, setIsConnected] = useState(false);\n\n  const debouncedHandlers = useRef<Function[]>([]);\n  const isMounted = useIsMounted();\n\n  // Development warnings\n  useEffect(() => {\n    warnInDevelopment(!ref, 'useGunState: ref is undefined');\n    warnInDevelopment(!!(appKeys && !sea), 'useGunState: appKeys provided but no SEA instance');\n  }, [ref, appKeys, sea]);\n\n  // Memoized updater\n  const updater = useMemo(() => debouncedUpdates(\n    (data: any) => {\n      if (isMounted.current) {\n        dispatch({ type: 'add', data });\n        setIsLoading(false);\n        setIsConnected(true);\n        setError(null);\n      }\n    },\n    'object',\n    interval\n  ), [interval, isMounted]);\n\n  // Connection timeout\n  useEffect(() => {\n    const connectionTimeout = setTimeout(() => {\n      if (isLoading) {\n        setError({\n          err: 'Connection timeout - no data received',\n          context: 'useGunState connection'\n        });\n        setIsLoading(false);\n      }\n    }, 5000); // 5 second timeout\n\n    return () => clearTimeout(connectionTimeout);\n  }, [isLoading]);\n\n  useGunOnNodeUpdated(\n    ref,\n    opts,\n    (item: any) => {\n      try {\n        if (item && typeof item === 'object') {\n          Object.keys(item).forEach((key) => {\n            let cleanFn = updater({ id: key, data: item[key] });\n            debouncedHandlers.current.push(cleanFn);\n          });\n        }\n      } catch (err) {\n        setError({\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunState data processing'\n        });\n      }\n    },\n    () => {\n      if (debouncedHandlers.current.length) {\n        //cleanup timeouts\n        debouncedHandlers.current.forEach((c) => c());\n        debouncedHandlers.current = [];\n      }\n    }\n  );\n\n  // Enhanced put with validation and error handling\n  const put = useCallback(async (data: Partial<T>): Promise<void> => {\n    try {\n      validateData(data, 'useGunState.put');\n      setError(null);\n      \n      let encryptedData = await encryptData(data, appKeys, sea);\n      \n      await new Promise<void>((resolve, reject) =>\n        ref.put(encryptedData, (ack: any) => {\n          if (ack.err) {\n            const error: GunError = {\n              err: ack.err,\n              context: 'useGunState.put'\n            };\n            setError(error);\n            reject(error);\n          } else {\n            resolve();\n          }\n        })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunState.put'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, appKeys, sea]);\n\n  // Enhanced remove with validation\n  const remove = useCallback(async (field: string): Promise<void> => {\n    try {\n      validateNodeID(field);\n      setError(null);\n      \n      await new Promise<void>((resolve, reject) =>\n        ref.put(null, (ack: any) => {\n          if (ack.err) {\n            const error: GunError = {\n              err: ack.err,\n              context: 'useGunState.remove'\n            };\n            setError(error);\n            reject(error);\n          } else {\n            if (isMounted.current) {\n              dispatch({ type: 'remove', data: { nodeID: field } });\n            }\n            resolve();\n          }\n        })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunState.remove'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, isMounted]);\n\n  return { \n    fields, \n    put, \n    remove, \n    error, \n    isLoading, \n    isConnected \n  };\n};\n\nexport const useGunCollectionState = <T extends Record<string, any>>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n): UseGunCollectionReturn<T> => {\n  const { appKeys, sea, interval = 100 } = opts;\n  const [{ collection }, dispatch] = useSafeReducer<CollectionState<NodeT<T>>>(\n    collectionReducer,\n    {\n      collection: new Map(),\n    }\n  );\n\n  const [error, setError] = useState<GunError | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const debouncedHandlers = useRef<Function[]>([]);\n  const isMounted = useIsMounted();\n\n  // Development warnings\n  useEffect(() => {\n    warnInDevelopment(!ref, 'useGunCollectionState: ref is undefined');\n    warnInDevelopment(!!(appKeys && !sea), 'useGunCollectionState: appKeys provided but no SEA instance');\n  }, [ref, appKeys, sea]);\n\n  // Memoized updater\n  const updater = useMemo(() => debouncedUpdates(\n    (data: NodeT<T>) => {\n      if (isMounted.current) {\n        dispatch({ type: 'add', data });\n        setIsLoading(false);\n        setError(null);\n      }\n    },\n    'map',\n    interval\n  ), [interval, isMounted]);\n\n  // Connection timeout\n  useEffect(() => {\n    const connectionTimeout = setTimeout(() => {\n      if (isLoading) {\n        setError({\n          err: 'Connection timeout - no data received',\n          context: 'useGunCollectionState connection'\n        });\n        setIsLoading(false);\n      }\n    }, 5000);\n\n    return () => clearTimeout(connectionTimeout);\n  }, [isLoading]);\n\n  useGunOnNodeUpdated(\n    ref.map(),\n    opts,\n    (item: T, nodeID: string) => {\n      if (item && typeof item === 'object') {\n        try {\n          setError(null);\n          let cleanFn = updater({\n            id: nodeID,\n            data: { ...item, nodeID } as NodeT<T>,\n          });\n          debouncedHandlers.current.push(cleanFn);\n        } catch (err) {\n          setError({\n            err: err instanceof Error ? err.message : 'Unknown error',\n            context: 'useGunCollectionState data processing'\n          });\n        }\n      }\n    },\n    () => {\n      if (debouncedHandlers.current.length) {\n        //cleanup timeouts\n        debouncedHandlers.current.forEach((c) => c());\n        debouncedHandlers.current = [];\n      }\n    }\n  );\n\n  // Working with Sets - Enhanced CRUD operations\n\n  const updateInSet = useCallback(async (nodeID: string, data: Partial<T>): Promise<void> => {\n    try {\n      validateNodeID(nodeID);\n      validateData(data, 'useGunCollectionState.updateInSet');\n      setError(null);\n      \n      let encryptedData = await encryptData(data, appKeys, sea);\n      await new Promise<void>((resolve, reject) =>\n        ref\n          .get(nodeID)\n          .put(encryptedData, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunCollectionState.updateInSet'\n              };\n              setError(error);\n              reject(error);\n            } else {\n              if (isMounted.current) {\n                dispatch({ type: 'update', data: { nodeID, ...data } as NodeT<T> });\n              }\n              resolve();\n            }\n          })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunCollectionState.updateInSet'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, appKeys, sea, isMounted]);\n\n  const addToSet = useCallback(async (data: T, nodeID?: string): Promise<void> => {\n    try {\n      validateData(data, 'useGunCollectionState.addToSet');\n      setError(null);\n      \n      let encryptedData = await encryptData(data, appKeys, sea);\n      \n      const promise = nodeID \n        ? new Promise<void>((resolve, reject) =>\n            ref.get(nodeID).put(encryptedData, (ack: any) =>\n              ack.err ? reject(new Error(ack.err)) : resolve()\n            )\n          )\n        : new Promise<void>((resolve, reject) =>\n            ref.set(encryptedData, (ack: any) =>\n              ack.err ? reject(new Error(ack.err)) : resolve()\n            )\n          );\n          \n      await promise;\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunCollectionState.addToSet'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, appKeys, sea]);\n\n  const removeFromSet = useCallback(async (nodeID: string): Promise<void> => {\n    try {\n      validateNodeID(nodeID);\n      setError(null);\n      \n      await new Promise<void>((resolve, reject) =>\n        ref\n          .get(nodeID)\n          .put(null, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunCollectionState.removeFromSet'\n              };\n              setError(error);\n              reject(error);\n            } else {\n              if (isMounted.current) {\n                dispatch({ type: 'remove', data: { nodeID } });\n              }\n              resolve();\n            }\n          })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunCollectionState.removeFromSet'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, isMounted]);\n\n  // Convert Map to Array for easier consumption\n  const items = useMemo(() => \n    collection ? Array.from(collection.values()) : [], \n    [collection]\n  );\n\n  const count = useMemo(() => collection?.size || 0, [collection]);\n\n  return { \n    collection, \n    items, // More convenient array access\n    addToSet, \n    updateInSet, \n    removeFromSet,\n    error,\n    isLoading,\n    count\n  };\n};\n\n// Auth Context and Provider\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport const AuthProvider: React.FC<AuthProviderOpts> = ({\n  Gun,\n  sea,\n  keyFieldName = 'keys',\n  storage,\n  gunOpts,\n  children,\n}) => {\n  if (!sea || !Gun || !gunOpts) {\n    throw new Error('Provide gunOpts, Gun and sea');\n  }\n\n  const [{ isReadyToAuth, existingKeys, keyStatus }, setStatuses] = useState<{\n    isReadyToAuth: string;\n    existingKeys: KeyPair | null;\n    keyStatus: string;\n  }>({\n    isReadyToAuth: '',\n    existingKeys: null,\n    keyStatus: '',\n  });\n\n  const gun = useGun(Gun, gunOpts);\n  // new keypair\n  const newKeys = useGunKeys(sea);\n  const [user, isLoggedIn] = useGunKeyAuth(\n    gun,\n    existingKeys || undefined,\n    isReadyToAuth === 'ready'\n  );\n\n  useEffect(() => {\n    if (isLoggedIn && existingKeys && keyStatus === 'new') {\n      const storeKeys = async () => {\n        await storage.setItem(keyFieldName, JSON.stringify(existingKeys));\n      };\n      storeKeys();\n    }\n  }, [isLoggedIn, existingKeys, keyFieldName, storage, keyStatus]);\n\n  useEffect(() => {\n    if (!existingKeys) {\n      const getKeys = async () => {\n        try {\n          const k = await storage.getItem(keyFieldName);\n          const ks = JSON.parse(k || 'null');\n          setStatuses({\n            isReadyToAuth: 'ready',\n            existingKeys: ks,\n            keyStatus: ks ? 'existing' : 'new',\n          });\n        } catch (error) {\n          console.warn('Failed to retrieve keys from storage:', error);\n          setStatuses({\n            isReadyToAuth: 'ready',\n            existingKeys: null,\n            keyStatus: 'new',\n          });\n        }\n      };\n      getKeys();\n    }\n  }, [storage, keyFieldName, existingKeys]);\n\n  const login = useCallback(\n    async (keys?: undefined | string | KeyPair) => {\n      // use keys sent by the user or a new set\n      setStatuses({\n        isReadyToAuth: 'ready',\n        existingKeys: (keys as KeyPair) || newKeys || null,\n        keyStatus: 'new',\n      });\n    },\n    [setStatuses, newKeys]\n  );\n\n  const logout = useCallback(\n    (onLoggedOut?: () => void) => {\n      const removeKeys = async () => {\n        try {\n          await storage.removeItem(keyFieldName);\n          setStatuses({\n            isReadyToAuth: '',\n            existingKeys: null,\n            keyStatus: '',\n          });\n          if (user) {\n            user.leave();\n          }\n          if (onLoggedOut) {\n            onLoggedOut();\n          }\n        } catch (error) {\n          console.warn('Failed to remove keys from storage:', error);\n        }\n      };\n      removeKeys();\n    },\n    [keyFieldName, storage, user]\n  );\n\n  const newGunInstance = useCallback((opts: GunOptions = gunOpts) => {\n    return Gun(opts);\n  }, [Gun, gunOpts]);\n\n  const value = useMemo<AuthContextType>(() => ({\n    gun,\n    user,\n    login,\n    logout,\n    sea,\n    appKeys: existingKeys || newKeys,\n    isLoggedIn,\n    newGunInstance,\n  }), [\n    gun,\n    user,\n    login,\n    logout,\n    sea,\n    newKeys,\n    existingKeys,\n    isLoggedIn,\n    newGunInstance,\n  ]);\n\n  return React.createElement(\n    AuthContext.Provider,\n    { value },\n    children\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Context provider for Gun instance\nexport const GunContext = createContext<IGunChainReference | null>(null);\n\nexport const GunProvider: React.FC<{\n  gun: GunStatic;\n  options: GunOptions;\n  children: React.ReactNode;\n}> = ({ gun, options, children }) => {\n  const gunInstance = useMemo(() => {\n    try {\n      return gun(options);\n    } catch (err) {\n      console.error('Failed to initialize Gun instance:', err);\n      return null;\n    }\n  }, [gun, JSON.stringify(options)]);\n  \n  return React.createElement(\n    GunContext.Provider,\n    { value: gunInstance },\n    children\n  );\n};\n\nexport const useGunContext = (): IGunChainReference => {\n  const context = useContext(GunContext);\n  if (!context) {\n    throw new Error('useGunContext must be used within a GunProvider');\n  }\n  return context;\n};\n\n// Debug utility hook\nexport const useGunDebug = (\n  ref: IGunChainReference, \n  label: string,\n  enabled: boolean = true\n): void => {\n  useEffect(() => {\n    if (!enabled || !ref) return;\n    \n    console.log(`[GunDB Debug - ${label}] Listening to:`, ref);\n    \n    const cleanup = ref.on((data, key) => {\n      console.log(`[${label}] Update:`, { \n        key, \n        data, \n        timestamp: new Date().toISOString() \n      });\n    });\n    \n    return cleanup;\n  }, [ref, label, enabled]);\n};\n\n// Connection status hook\nexport const useGunConnection = (ref: IGunChainReference): {\n  isConnected: boolean;\n  lastSeen: Date | null;\n  error: GunError | null;\n} => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastSeen, setLastSeen] = useState<Date | null>(null);\n  const [error, setError] = useState<GunError | null>(null);\n\n  useEffect(() => {\n    if (!ref) return;\n\n    let timeoutId: number;\n\n    const resetTimeout = () => {\n      clearTimeout(timeoutId);\n      timeoutId = window.setTimeout(() => {\n        setIsConnected(false);\n        setError({\n          err: 'Connection timeout',\n          context: 'useGunConnection'\n        });\n      }, 10000); // 10 second timeout\n    };\n\n    const cleanup = ref.on(() => {\n      setIsConnected(true);\n      setLastSeen(new Date());\n      setError(null);\n      resetTimeout();\n    });\n\n    // Initial timeout\n    resetTimeout();\n\n    return () => {\n      clearTimeout(timeoutId);\n      if (cleanup) cleanup();\n    };\n  }, [ref]);\n\n  return { isConnected, lastSeen, error };\n};\n"],"names":["_catch","body","recover","result","e","then","encryptData","data","keys","sea","Promise","resolve","encrypt","error","console","warn","reject","decryptData","decrypt","validateNodeID","nodeID","trim","length","Error","validateData","context","undefined","warnInDevelopment","condition","message","window","debouncedUpdates","dispatcher","type","timeout","updates","handler","update","push","setTimeout","newStateSlice","reduce","previousState","_ref","id","set","Map","clearTimeout","useIsMounted","isMounted","useRef","useEffect","current","nodeReducer","state","_ref2","_extends","collectionReducer","_ref3","_state$collection4","Array","isArray","forEach","item","_state$collection","collection","_state$collection2","_state$collection3","useSafeReducer","reducer","initialState","_useReducer","useReducer","dispatch","safeDispatch","args","useGun","Gun","opts","_useState","useState","gun","setGun","useGunNamespace","soul","_useState2","user","namespace","setNamespace","useGunKeyAuth","triggerAuth","namespacedGraph","_useState3","isLoggedIn","setIsLoggedIn","_useState4","setError","cleanup","on","is","auth","ack","err","useGunKeys","existingKeys","_useState5","newKeys","setNewKeys","getKeySet","pair","useGunOnNodeUpdated","ref","cb","appKeys","useOpen","_opts","gunCb","encryptedField","event","_temp2","off","_temp","decryptedField","open","useGunState","interval","_opts2","_opts2$interval","_useSafeReducer","fields","_useState6","_useState7","isLoading","setIsLoading","_useState8","isConnected","setIsConnected","debouncedHandlers","updater","useMemo","connectionTimeout","Object","key","cleanFn","c","put","useCallback","encryptedData","remove","field","useGunCollectionState","_opts3","_opts3$interval","_useSafeReducer2","_useState9","_useState10","map","updateInSet","get","addToSet","promise","removeFromSet","items","from","values","count","size","AuthContext","createContext","AuthProvider","_ref4","_ref4$keyFieldName","keyFieldName","storage","gunOpts","children","_useState11","isReadyToAuth","keyStatus","_useState11$","setStatuses","_useGunKeyAuth","storeKeys","setItem","JSON","stringify","getKeys","_temp3","getItem","k","ks","parse","login","logout","onLoggedOut","removeKeys","_temp4","removeItem","leave","newGunInstance","value","React","createElement","Provider","useAuth","useContext","GunContext","GunProvider","_ref5","options","gunInstance","useGunContext","useGunDebug","label","enabled","log","timestamp","Date","toISOString","useGunConnection","_useState12","_useState13","lastSeen","setLastSeen","_useState14","timeoutId","resetTimeout"],"mappings":"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"}