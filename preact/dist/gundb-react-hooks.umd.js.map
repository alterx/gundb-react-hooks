{"version":3,"file":"gundb-react-hooks.umd.js","sources":["../../src/index.ts"],"sourcesContent":["// @ts-ignore\nimport React, { useState, useEffect, useReducer, useRef, useMemo, useCallback, useContext, createContext } from 'react';\n\n// Enhanced TypeScript definitions\nexport interface IGunChainReference<T = any> {\n  get(key: string): IGunChainReference<T>;\n  put(data: T, callback?: (ack: { err?: string; ok?: any }) => void): IGunChainReference<T>;\n  on(callback: (data: T, key: string, message?: any, event?: any) => void): () => void;\n  once(callback: (data: T, key: string) => void): void;\n  set(data: T, callback?: (ack: { err?: string; ok?: any }) => void): IGunChainReference<T>;\n  map(): IGunChainReference<T>;\n  open?(callback: (data: T, key: string, message?: any, event?: any) => void): void;\n  user(soul?: string): IGunUserReference;\n  off(): void;\n  toString(): string;\n}\n\nexport interface IGunUserReference extends IGunChainReference {\n  is: KeyPair | null;\n  auth(keypair: KeyPair, callback?: (ack: any) => void): void;\n  create(keypair: KeyPair, callback?: (ack: any) => void): void;\n  leave(): void;\n}\n\nexport interface GunError {\n  err: string;\n  code?: string | number;\n  context?: string;\n}\n\nexport type ValidGunData = string | number | boolean | object | null;\n\n// Legacy types for backward compatibility\nexport type GunStatic = any;\nexport type GunRef = IGunChainReference;\nexport type NamespacedRef = IGunUserReference;\n\nexport type KeyPair = {\n  pub: string;\n  priv: string;\n  epub: string;\n  epriv: string;\n};\n\n// Auth-related types\nexport type Storage = {\n  getItem: (key: string) => any;\n  setItem: (key: string, data: string) => any;\n  removeItem: (key: string) => any;\n};\n\nexport type AuthContextType = {\n  gun: IGunChainReference;\n  user: IGunUserReference;\n  login: (keys?: undefined | string | KeyPair) => void;\n  logout: (onLoggedOut?: () => void) => void;\n  sea: any;\n  appKeys: undefined | string | KeyPair;\n  isLoggedIn: boolean;\n  newGunInstance: (opts?: GunOptions) => IGunChainReference;\n};\n\nexport type AuthProviderOpts = {\n  Gun: any;\n  sea: any;\n  keyFieldName?: string;\n  storage: Storage;\n  gunOpts: GunOptions;\n  children: React.ReactNode;\n};\n\nexport type Options = {\n  appKeys?: undefined | string | KeyPair;\n  sea?: any;\n  interval?: number;\n  useOpen?: boolean;\n};\n\nexport type NodeData<T extends ValidGunData> = T & { \n  readonly nodeID: string; \n  readonly _?: { '#': string; '>': Record<string, number> };\n};\n\n// Enhanced legacy type for backward compatibility\nexport type NodeT<T> = T & { nodeID: string; [key: string]: any };\n\nexport type ActionType<T> =\n  | { type: 'add'; data: NodeT<T> | NodeT<T>[] }\n  | { type: 'update'; data: NodeT<T> }\n  | { type: 'remove'; data: { nodeID: string } };\n\nexport type UpdateType = {\n  id: string;\n  data: any;\n};\n\nexport interface GunOptions\n  extends Partial<{\n    file: string;\n    web: any;\n    s3: {\n      key: any;\n      secret: any;\n      bucket: any;\n    };\n    peers: string[] | Record<string, {}>;\n    radisk: boolean;\n    localStorage: boolean;\n    uuid(): string;\n    [key: string]: any;\n  }> {}\n\nexport interface CollectionState<T>\n  extends Partial<{\n    collection: Map<string, T>;\n    sorted: T[];\n    infiniteScrolling: {\n      isFetching: boolean;\n      lastFetched: string;\n      reverse: boolean;\n    };\n  }> {}\n\n// Hook return types\nexport interface UseGunStateReturn<T> {\n  fields: T;\n  put: (data: Partial<T>) => Promise<void>;\n  remove: (field: string) => Promise<void>;\n  error: GunError | null;\n  isLoading: boolean;\n  isConnected: boolean;\n}\n\nexport interface UseGunCollectionReturn<T> {\n  collection: Map<string, NodeT<T>> | undefined;\n  items: NodeT<T>[];\n  addToSet: (data: T, nodeID?: string) => Promise<void>;\n  updateInSet: (nodeID: string, data: Partial<T>) => Promise<void>;\n  removeFromSet: (nodeID: string) => Promise<void>;\n  error: GunError | null;\n  isLoading: boolean;\n  count: number;\n}\n\nexport const encryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  try {\n    return keys && sea ? await sea.encrypt(data, keys) : data;\n  } catch (error) {\n    console.warn('Failed to encrypt data:', error);\n    return data;\n  }\n};\n\nexport const decryptData = async (\n  data: any,\n  keys: undefined | string | KeyPair,\n  sea: any\n) => {\n  try {\n    return keys && sea ? await sea.decrypt(data, keys) : data;\n  } catch (error) {\n    console.warn('Failed to decrypt data:', error);\n    return data;\n  }\n};\n\n// Utility functions\nconst validateNodeID = (nodeID: string): void => {\n  if (!nodeID || typeof nodeID !== 'string' || nodeID.trim().length === 0) {\n    throw new Error('Invalid nodeID: must be a non-empty string');\n  }\n};\n\nconst validateData = <T>(data: T, context: string): void => {\n  if (data === undefined) {\n    throw new Error(`Data cannot be undefined in ${context}`);\n  }\n};\n\nconst warnInDevelopment = (condition: boolean, message: string): void => {\n  // @ts-ignore\n  if (typeof window !== 'undefined' && condition) {\n    console.warn(`[GunDB Hooks Warning] ${message}`);\n  }\n};\n\nexport const debouncedUpdates = (\n  dispatcher: any,\n  type = 'object',\n  timeout = 100\n) => {\n  let updates: any[] = [];\n  let handler: any;\n  return (update: UpdateType) => {\n    updates.push(update);\n    if (!handler) {\n      handler = setTimeout(() => {\n        let newStateSlice = updates.reduce(\n          (previousState, { id, data }) => {\n            if (type === 'object') {\n              previousState[id] = data;\n            } else {\n              previousState.set(id, data);\n            }\n            return previousState;\n          },\n          type === 'object' ? {} : new Map()\n        );\n        dispatcher(newStateSlice);\n        updates = [];\n        handler = null;\n      }, timeout);\n    }\n\n    return () => {\n      clearTimeout(handler);\n      updates = [];\n      handler = null;\n    };\n  };\n};\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\nexport const nodeReducer = <T>(\n  state: NodeT<T>,\n  { data, type }: ActionType<T>\n): T => {\n  switch (type) {\n    case 'add':\n      return { ...state, ...data };\n    case 'remove':\n      delete state[data.nodeID];\n      return { ...state };\n    default:\n      throw new Error();\n  }\n};\n\nexport const collectionReducer = <T>(\n  state: CollectionState<T>,\n  { data, type }: ActionType<T>\n): CollectionState<T> => {\n  switch (type) {\n    case 'add':\n      if (Array.isArray(data)) {\n        data.forEach((item: NodeT<T>) => {\n          state.collection?.set(item.nodeID, item);\n        });\n      } else {\n        state.collection?.set(data.nodeID, data);\n      }\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    case 'update':\n      if (!Array.isArray(data)) {\n        state.collection?.set(data.nodeID, data);\n      }\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    case 'remove':\n      state.collection?.delete(data.nodeID);\n      return {\n        ...state,\n        collection: state.collection,\n      };\n    default:\n      throw new Error(`Unknown action type: ${type}`);\n  }\n};\n\nexport const useSafeReducer = <T>(\n  reducer: any,\n  initialState: T\n): [T, Function] => {\n  const [state, dispatch] = useReducer<React.Reducer<T, ActionType<T>>>(\n    reducer,\n    initialState\n  );\n  const isMounted = useIsMounted();\n\n  function safeDispatch(args: ActionType<T>) {\n    if (isMounted.current) {\n      dispatch(args);\n    }\n  }\n\n  return [state, safeDispatch];\n};\n\nexport const useGun = (Gun: GunStatic, opts: GunOptions) => {\n  const [gun, setGun] = useState(Gun({ ...opts }));\n\n  useEffect(() => {\n    if (opts) {\n      setGun(Gun({ ...opts }));\n    }\n  }, [Gun, opts]);\n\n  return gun;\n};\n\nexport const useGunNamespace = (gun: GunRef, soul?: string) => {\n  const [namespace, setNamespace] = useState(\n    soul ? gun.user(soul) : gun.user()\n  );\n  useEffect(() => {\n    if (gun && !namespace) {\n      setNamespace(soul ? gun.user(soul) : gun.user());\n    }\n  }, [namespace, gun, soul]);\n  return namespace;\n};\n\nexport const useGunKeyAuth = (\n  gun: GunRef,\n  keys: KeyPair,\n  triggerAuth: boolean = true\n) => {\n  // Will attempt to perform a login (when triggerAuth is set to true),\n  // or, if false, returns a namespaced gun node\n  const namespacedGraph = useGunNamespace(gun);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [error, setError] = useState<GunError | null>(null);\n\n  useEffect(() => {\n    if (!gun) return;\n    \n    // @ts-ignore - Gun types are not properly defined\n    const cleanup = gun.on('auth', () => {\n      setIsLoggedIn(true);\n      setError(null);\n    });\n\n    return cleanup;\n  }, [gun]);\n\n  useEffect(() => {\n    if (namespacedGraph && !namespacedGraph.is && keys && triggerAuth) {\n      try {\n        namespacedGraph.auth(keys, (ack: any) => {\n          if (ack.err) {\n            setError({\n              err: ack.err,\n              context: 'useGunKeyAuth.auth'\n            });\n          }\n        });\n      } catch (err) {\n        setError({\n          err: err instanceof Error ? err.message : 'Authentication failed',\n          context: 'useGunKeyAuth'\n        });\n      }\n    }\n  }, [triggerAuth, namespacedGraph, keys]);\n\n  return [namespacedGraph, isLoggedIn, error] as const;\n};\n\nexport const useGunKeys = (\n  sea: any,\n  existingKeys?: KeyPair | undefined | null\n) => {\n  const [newKeys, setNewKeys] = useState<KeyPair | undefined | null>(\n    existingKeys\n  );\n\n  useEffect(() => {\n    async function getKeySet() {\n      const pair: KeyPair = await sea.pair();\n      setNewKeys(pair);\n    }\n\n    if (!newKeys && !existingKeys) {\n      getKeySet();\n    }\n\n    if (existingKeys) {\n      setNewKeys(existingKeys);\n    }\n  }, [existingKeys, newKeys, sea]);\n\n  return newKeys;\n};\n\nexport const useGunOnNodeUpdated = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    useOpen: false,\n  },\n  cb: (data: T, nodeID: string) => void,\n  cleanup?: () => void\n) => {\n  const { appKeys, sea, useOpen } = opts;\n  const handler = useRef<(() => void) | null>(null);\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    if (!ref || !isMounted.current) return;\n\n    const gunCb = async (\n      encryptedField: any,\n      nodeID: string,\n      message: any,\n      event: any\n    ) => {\n      if (!isMounted.current) return;\n      \n      try {\n        let decryptedField = await decryptData(encryptedField, appKeys, sea);\n        cb(decryptedField, nodeID);\n      } catch (error) {\n        console.warn('Failed to decrypt data in useGunOnNodeUpdated:', error);\n      }\n\n      if (!handler.current && event?.off) {\n        handler.current = () => event.off();\n      }\n    };\n\n    if (useOpen) {\n      if (!ref.open) {\n        throw new Error('Please include gun/lib/open.');\n      } else {\n        ref.open(gunCb);\n      }\n    } else {\n      ref.on(gunCb);\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current();\n        handler.current = null;\n      }\n      if (cleanup) {\n        cleanup();\n      }\n    };\n  }, [ref, appKeys, sea, useOpen, cb, cleanup, isMounted]);\n};\n\nexport const useGunState = <T>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n): UseGunStateReturn<T> => {\n  const { appKeys, sea, interval = 100 } = opts;\n  const [fields, dispatch] = useSafeReducer<T>(nodeReducer, {} as T);\n  const [error, setError] = useState<GunError | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isConnected, setIsConnected] = useState(false);\n\n  const debouncedHandlers = useRef<Function[]>([]);\n  const isMounted = useIsMounted();\n\n  // Development warnings\n  useEffect(() => {\n    warnInDevelopment(!ref, 'useGunState: ref is undefined');\n    warnInDevelopment(!!(appKeys && !sea), 'useGunState: appKeys provided but no SEA instance');\n  }, [ref, appKeys, sea]);\n\n  // Memoized updater\n  const updater = useMemo(() => debouncedUpdates(\n    (data: any) => {\n      if (isMounted.current) {\n        dispatch({ type: 'add', data });\n        setIsLoading(false);\n        setIsConnected(true);\n        setError(null);\n      }\n    },\n    'object',\n    interval\n  ), [interval, isMounted]);\n\n  // Connection timeout\n  useEffect(() => {\n    const connectionTimeout = setTimeout(() => {\n      if (isLoading) {\n        setError({\n          err: 'Connection timeout - no data received',\n          context: 'useGunState connection'\n        });\n        setIsLoading(false);\n      }\n    }, 5000); // 5 second timeout\n\n    return () => clearTimeout(connectionTimeout);\n  }, [isLoading]);\n\n  useGunOnNodeUpdated(\n    ref,\n    opts,\n    (item: any) => {\n      try {\n        if (item && typeof item === 'object') {\n          Object.keys(item).forEach((key) => {\n            let cleanFn = updater({ id: key, data: item[key] });\n            debouncedHandlers.current.push(cleanFn);\n          });\n        }\n      } catch (err) {\n        setError({\n          err: err instanceof Error ? err.message : 'Unknown error',\n          context: 'useGunState data processing'\n        });\n      }\n    },\n    () => {\n      if (debouncedHandlers.current.length) {\n        //cleanup timeouts\n        debouncedHandlers.current.forEach((c) => c());\n        debouncedHandlers.current = [];\n      }\n    }\n  );\n\n  // Enhanced put with validation and error handling\n  const put = useCallback(async (data: Partial<T>): Promise<void> => {\n    try {\n      validateData(data, 'useGunState.put');\n      setError(null);\n      \n      let encryptedData = await encryptData(data, appKeys, sea);\n      \n      await new Promise<void>((resolve, reject) =>\n        ref.put(encryptedData, (ack: any) => {\n          if (ack.err) {\n            const error: GunError = {\n              err: ack.err,\n              context: 'useGunState.put'\n            };\n            setError(error);\n            reject(error);\n          } else {\n            resolve();\n          }\n        })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunState.put'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, appKeys, sea]);\n\n  // Enhanced remove with validation\n  const remove = useCallback(async (field: string): Promise<void> => {\n    try {\n      validateNodeID(field);\n      setError(null);\n      \n      await new Promise<void>((resolve, reject) =>\n        ref.put(null, (ack: any) => {\n          if (ack.err) {\n            const error: GunError = {\n              err: ack.err,\n              context: 'useGunState.remove'\n            };\n            setError(error);\n            reject(error);\n          } else {\n            if (isMounted.current) {\n              dispatch({ type: 'remove', data: { nodeID: field } });\n            }\n            resolve();\n          }\n        })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunState.remove'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, isMounted]);\n\n  return { \n    fields, \n    put, \n    remove, \n    error, \n    isLoading, \n    isConnected \n  };\n};\n\nexport const useGunCollectionState = <T extends Record<string, any>>(\n  ref: GunRef,\n  opts: Options = {\n    appKeys: '',\n    sea: null,\n    interval: 100,\n    useOpen: false,\n  }\n): UseGunCollectionReturn<T> => {\n  const { appKeys, sea, interval = 100 } = opts;\n  const [{ collection }, dispatch] = useSafeReducer<CollectionState<NodeT<T>>>(\n    collectionReducer,\n    {\n      collection: new Map(),\n    }\n  );\n\n  const [error, setError] = useState<GunError | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const debouncedHandlers = useRef<Function[]>([]);\n  const isMounted = useIsMounted();\n\n  // Development warnings\n  useEffect(() => {\n    warnInDevelopment(!ref, 'useGunCollectionState: ref is undefined');\n    warnInDevelopment(!!(appKeys && !sea), 'useGunCollectionState: appKeys provided but no SEA instance');\n  }, [ref, appKeys, sea]);\n\n  // Memoized updater\n  const updater = useMemo(() => debouncedUpdates(\n    (data: NodeT<T>) => {\n      if (isMounted.current) {\n        dispatch({ type: 'add', data });\n        setIsLoading(false);\n        setError(null);\n      }\n    },\n    'map',\n    interval\n  ), [interval, isMounted]);\n\n  // Connection timeout\n  useEffect(() => {\n    const connectionTimeout = setTimeout(() => {\n      if (isLoading) {\n        setError({\n          err: 'Connection timeout - no data received',\n          context: 'useGunCollectionState connection'\n        });\n        setIsLoading(false);\n      }\n    }, 5000);\n\n    return () => clearTimeout(connectionTimeout);\n  }, [isLoading]);\n\n  useGunOnNodeUpdated(\n    ref.map(),\n    opts,\n    (item: T, nodeID: string) => {\n      if (item && typeof item === 'object') {\n        try {\n          setError(null);\n          let cleanFn = updater({\n            id: nodeID,\n            data: { ...item, nodeID } as NodeT<T>,\n          });\n          debouncedHandlers.current.push(cleanFn);\n        } catch (err) {\n          setError({\n            err: err instanceof Error ? err.message : 'Unknown error',\n            context: 'useGunCollectionState data processing'\n          });\n        }\n      }\n    },\n    () => {\n      if (debouncedHandlers.current.length) {\n        //cleanup timeouts\n        debouncedHandlers.current.forEach((c) => c());\n        debouncedHandlers.current = [];\n      }\n    }\n  );\n\n  // Working with Sets - Enhanced CRUD operations\n\n  const updateInSet = useCallback(async (nodeID: string, data: Partial<T>): Promise<void> => {\n    try {\n      validateNodeID(nodeID);\n      validateData(data, 'useGunCollectionState.updateInSet');\n      setError(null);\n      \n      let encryptedData = await encryptData(data, appKeys, sea);\n      await new Promise<void>((resolve, reject) =>\n        ref\n          .get(nodeID)\n          .put(encryptedData, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunCollectionState.updateInSet'\n              };\n              setError(error);\n              reject(error);\n            } else {\n              if (isMounted.current) {\n                dispatch({ type: 'update', data: { nodeID, ...data } as NodeT<T> });\n              }\n              resolve();\n            }\n          })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunCollectionState.updateInSet'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, appKeys, sea, isMounted]);\n\n  const addToSet = useCallback(async (data: T, nodeID?: string): Promise<void> => {\n    try {\n      validateData(data, 'useGunCollectionState.addToSet');\n      setError(null);\n      \n      let encryptedData = await encryptData(data, appKeys, sea);\n      \n      const promise = nodeID \n        ? new Promise<void>((resolve, reject) =>\n            ref.get(nodeID).put(encryptedData, (ack: any) =>\n              ack.err ? reject(new Error(ack.err)) : resolve()\n            )\n          )\n        : new Promise<void>((resolve, reject) =>\n            ref.set(encryptedData, (ack: any) =>\n              ack.err ? reject(new Error(ack.err)) : resolve()\n            )\n          );\n          \n      await promise;\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunCollectionState.addToSet'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, appKeys, sea]);\n\n  const removeFromSet = useCallback(async (nodeID: string): Promise<void> => {\n    try {\n      validateNodeID(nodeID);\n      setError(null);\n      \n      await new Promise<void>((resolve, reject) =>\n        ref\n          .get(nodeID)\n          .put(null, (ack: any) => {\n            if (ack.err) {\n              const error: GunError = {\n                err: ack.err,\n                context: 'useGunCollectionState.removeFromSet'\n              };\n              setError(error);\n              reject(error);\n            } else {\n              if (isMounted.current) {\n                dispatch({ type: 'remove', data: { nodeID } });\n              }\n              resolve();\n            }\n          })\n      );\n    } catch (err) {\n      const error: GunError = {\n        err: err instanceof Error ? err.message : 'Unknown error',\n        context: 'useGunCollectionState.removeFromSet'\n      };\n      setError(error);\n      throw error;\n    }\n  }, [ref, isMounted]);\n\n  // Convert Map to Array for easier consumption\n  const items = useMemo(() => \n    collection ? Array.from(collection.values()) : [], \n    [collection]\n  );\n\n  const count = useMemo(() => collection?.size || 0, [collection]);\n\n  return { \n    collection, \n    items, // More convenient array access\n    addToSet, \n    updateInSet, \n    removeFromSet,\n    error,\n    isLoading,\n    count\n  };\n};\n\n// Auth Context and Provider\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport const AuthProvider: React.FC<AuthProviderOpts> = ({\n  Gun,\n  sea,\n  keyFieldName = 'keys',\n  storage,\n  gunOpts,\n  children,\n}) => {\n  if (!sea || !Gun || !gunOpts) {\n    throw new Error('Provide gunOpts, Gun and sea');\n  }\n\n  const [{ isReadyToAuth, existingKeys, keyStatus }, setStatuses] = useState<{\n    isReadyToAuth: string;\n    existingKeys: KeyPair | null;\n    keyStatus: string;\n  }>({\n    isReadyToAuth: '',\n    existingKeys: null,\n    keyStatus: '',\n  });\n\n  const gun = useGun(Gun, gunOpts);\n  // new keypair\n  const newKeys = useGunKeys(sea);\n  const [user, isLoggedIn] = useGunKeyAuth(\n    gun,\n    existingKeys || undefined,\n    isReadyToAuth === 'ready'\n  );\n\n  useEffect(() => {\n    if (isLoggedIn && existingKeys && keyStatus === 'new') {\n      const storeKeys = async () => {\n        await storage.setItem(keyFieldName, JSON.stringify(existingKeys));\n      };\n      storeKeys();\n    }\n  }, [isLoggedIn, existingKeys, keyFieldName, storage, keyStatus]);\n\n  useEffect(() => {\n    if (!existingKeys) {\n      const getKeys = async () => {\n        try {\n          const k = await storage.getItem(keyFieldName);\n          const ks = JSON.parse(k || 'null');\n          setStatuses({\n            isReadyToAuth: 'ready',\n            existingKeys: ks,\n            keyStatus: ks ? 'existing' : 'new',\n          });\n        } catch (error) {\n          console.warn('Failed to retrieve keys from storage:', error);\n          setStatuses({\n            isReadyToAuth: 'ready',\n            existingKeys: null,\n            keyStatus: 'new',\n          });\n        }\n      };\n      getKeys();\n    }\n  }, [storage, keyFieldName, existingKeys]);\n\n  const login = useCallback(\n    async (keys?: undefined | string | KeyPair) => {\n      // use keys sent by the user or a new set\n      setStatuses({\n        isReadyToAuth: 'ready',\n        existingKeys: (keys as KeyPair) || newKeys || null,\n        keyStatus: 'new',\n      });\n    },\n    [setStatuses, newKeys]\n  );\n\n  const logout = useCallback(\n    (onLoggedOut?: () => void) => {\n      const removeKeys = async () => {\n        try {\n          await storage.removeItem(keyFieldName);\n          setStatuses({\n            isReadyToAuth: '',\n            existingKeys: null,\n            keyStatus: '',\n          });\n          if (user) {\n            user.leave();\n          }\n          if (onLoggedOut) {\n            onLoggedOut();\n          }\n        } catch (error) {\n          console.warn('Failed to remove keys from storage:', error);\n        }\n      };\n      removeKeys();\n    },\n    [keyFieldName, storage, user]\n  );\n\n  const newGunInstance = useCallback((opts: GunOptions = gunOpts) => {\n    return Gun(opts);\n  }, [Gun, gunOpts]);\n\n  const value = useMemo<AuthContextType>(() => ({\n    gun,\n    user,\n    login,\n    logout,\n    sea,\n    appKeys: existingKeys || newKeys,\n    isLoggedIn,\n    newGunInstance,\n  }), [\n    gun,\n    user,\n    login,\n    logout,\n    sea,\n    newKeys,\n    existingKeys,\n    isLoggedIn,\n    newGunInstance,\n  ]);\n\n  return React.createElement(\n    AuthContext.Provider,\n    { value },\n    children\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Context provider for Gun instance\nexport const GunContext = createContext<IGunChainReference | null>(null);\n\nexport const GunProvider: React.FC<{\n  gun: GunStatic;\n  options: GunOptions;\n  children: React.ReactNode;\n}> = ({ gun, options, children }) => {\n  const gunInstance = useMemo(() => {\n    try {\n      return gun(options);\n    } catch (err) {\n      console.error('Failed to initialize Gun instance:', err);\n      return null;\n    }\n  }, [gun, JSON.stringify(options)]);\n  \n  return React.createElement(\n    GunContext.Provider,\n    { value: gunInstance },\n    children\n  );\n};\n\nexport const useGunContext = (): IGunChainReference => {\n  const context = useContext(GunContext);\n  if (!context) {\n    throw new Error('useGunContext must be used within a GunProvider');\n  }\n  return context;\n};\n\n// Debug utility hook\nexport const useGunDebug = (\n  ref: IGunChainReference, \n  label: string,\n  enabled: boolean = true\n): void => {\n  useEffect(() => {\n    if (!enabled || !ref) return;\n    \n    console.log(`[GunDB Debug - ${label}] Listening to:`, ref);\n    \n    const cleanup = ref.on((data, key) => {\n      console.log(`[${label}] Update:`, { \n        key, \n        data, \n        timestamp: new Date().toISOString() \n      });\n    });\n    \n    return cleanup;\n  }, [ref, label, enabled]);\n};\n\n// Connection status hook\nexport const useGunConnection = (ref: IGunChainReference): {\n  isConnected: boolean;\n  lastSeen: Date | null;\n  error: GunError | null;\n} => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastSeen, setLastSeen] = useState<Date | null>(null);\n  const [error, setError] = useState<GunError | null>(null);\n\n  useEffect(() => {\n    if (!ref) return;\n\n    let timeoutId: number;\n\n    const resetTimeout = () => {\n      clearTimeout(timeoutId);\n      timeoutId = window.setTimeout(() => {\n        setIsConnected(false);\n        setError({\n          err: 'Connection timeout',\n          context: 'useGunConnection'\n        });\n      }, 10000); // 10 second timeout\n    };\n\n    const cleanup = ref.on(() => {\n      setIsConnected(true);\n      setLastSeen(new Date());\n      setError(null);\n      resetTimeout();\n    });\n\n    // Initial timeout\n    resetTimeout();\n\n    return () => {\n      clearTimeout(timeoutId);\n      if (cleanup) cleanup();\n    };\n  }, [ref]);\n\n  return { isConnected, lastSeen, error };\n};\n"],"names":["_catch","body","recover","result","e","then","encryptData","data","keys","sea","Promise","resolve","encrypt","error","console","warn","reject","decryptData","decrypt","validateNodeID","nodeID","trim","length","Error","validateData","context","undefined","warnInDevelopment","condition","message","window","debouncedUpdates","dispatcher","type","timeout","updates","handler","update","push","setTimeout","newStateSlice","reduce","previousState","_ref","id","set","Map","clearTimeout","useIsMounted","isMounted","useRef","useEffect","current","nodeReducer","state","_ref2","_extends","collectionReducer","_ref3","_state$collection4","Array","isArray","forEach","item","_state$collection","collection","_state$collection2","_state$collection3","useSafeReducer","reducer","initialState","_useReducer","useReducer","dispatch","safeDispatch","args","useGun","Gun","opts","_useState","useState","gun","setGun","useGunNamespace","soul","_useState2","user","namespace","setNamespace","useGunKeyAuth","triggerAuth","namespacedGraph","_useState3","isLoggedIn","setIsLoggedIn","_useState4","setError","cleanup","on","is","auth","ack","err","useGunKeys","existingKeys","_useState5","newKeys","setNewKeys","getKeySet","pair","useGunOnNodeUpdated","ref","cb","appKeys","useOpen","_opts","gunCb","encryptedField","event","_temp2","off","_temp","decryptedField","open","useGunState","interval","_opts2","_opts2$interval","_useSafeReducer","fields","_useState6","_useState7","isLoading","setIsLoading","_useState8","isConnected","setIsConnected","debouncedHandlers","updater","useMemo","connectionTimeout","Object","key","cleanFn","c","put","useCallback","encryptedData","remove","field","useGunCollectionState","_opts3","_opts3$interval","_useSafeReducer2","_useState9","_useState10","map","updateInSet","get","addToSet","promise","removeFromSet","items","from","values","count","size","AuthContext","createContext","AuthProvider","_ref4","_ref4$keyFieldName","keyFieldName","storage","gunOpts","children","_useState11","isReadyToAuth","keyStatus","_useState11$","setStatuses","_useGunKeyAuth","storeKeys","setItem","JSON","stringify","getKeys","_temp3","getItem","k","ks","parse","login","logout","onLoggedOut","removeKeys","_temp4","removeItem","leave","newGunInstance","value","React","createElement","Provider","useAuth","useContext","GunContext","GunProvider","_ref5","options","gunInstance","useGunContext","useGunDebug","label","enabled","log","timestamp","Date","toISOString","useGunConnection","_useState12","_useState13","lastSeen","setLastSeen","_useState14","timeoutId","resetTimeout"],"mappings":"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"}